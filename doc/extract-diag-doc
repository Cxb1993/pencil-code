#!/bin/sh
#  -*-Perl-*-
#======================================================================#
# Run the right perl version:
if [ -x /usr/local/bin/perl ]; then
  perl=/usr/local/bin/perl
elif [ -x /usr/bin/perl ]; then
  perl=/usr/bin/perl
else
  perl=`which perl| sed 's/.*aliased to *//'`
fi

exec $perl -x -S $0 "$@"     # -x: start from the following line
#======================================================================#
#! /Good_Path/perl -w
# line 17

# Name:   extract-diag-doc
# Author: wd (Wolfgang.Dobler@ucalgary.de)
# Date:   03-Oct-2006
# Description:
#   Extract documentation for diagnostic variables from lines of the form
#     integer :: idiag_var=0  ! DIAG_DOC: <TeX documentation string>
#                             ! DIAG_DOC: <possible continuation>
#   in the modules in ${PENCIL_HOME}/src/
# Usage:
#   extract-diag-doc [-v|-h]
# Options:
#   -h, --help      This help
#   -v, --version   Print version number
#   -q, --quiet     Be quiet

# Copyright (C) 2006  Wolfgang Dobler
#
# This program is free software; you can redistribute it and/or modify it
# under the same conditions as Perl or under the GPL versions 2 or later.

use strict;

eval "use Pencil::DocExtractor";
if ($@) {             # Error loading DocExtractor.pm -- give useful advice
    my $error = join("\n",$@);
    if ($error =~ m|Can't locate Pencil/DocExtractor.pm in \@INC|) {
        if (! -d "$ENV{PENCIL_HOME}/lib/perl") { # forgot to cvs up -d perl
            die "Perl: Can't locate Pencil/DocExtractor.pm in \@INC\n"
              . "You need to check out the Pencil library (including lib/perl) d
irectory:\n"
              . "  (cd \$PENCIL_HOME; cvs up -d lib)\n";
        } else {               # $PENCIL_HOME/lib/perl missing in PERL5LIB
            die "Perl: Can't locate Pencil::DocExtractor.pm in \@INC\n"
              ."Pencil::DocExtractor.pm must be missing from your working copy, 
try:\n"
              ."(cd \$PENCIL_HOME/lib/perl; cvs up -dA)\n";
        }
    } else {                    # unknown error message
        die "$@\n";
    }
}

use Getopt::Long;
# Allow for `-Plp' as equivalent to `-P lp' etc:
Getopt::Long::config("bundling");

my (%opts);                     # Options hash for GetOptions
my $doll='\$';                  # Need this to trick CVS

## Process command line
GetOptions(\%opts,
           qw( -h    --help
                     --debug
               -o=s  --output=s
               -q    --quiet
               -v    --version ));

my $debug = ($opts{'debug'} ? 1 : 0 ); # undocumented debug option
if ($debug) {
    printopts(\%opts);
    print STDERR "\@ARGV = `@ARGV'\n";
}

if ($opts{'h'} || $opts{'help'})    { die usage();   }
if ($opts{'v'} || $opts{'version'}) { die version(); }

my $quiet = ($opts{'q'} || $opts{'quiet'}  || '' );
my $file  = ($opts{'o'} || $opts{'output'} || '-');

my $marker_re = '!\s+[A-Z]+_DOC:';
my (@module_files, $all_src);

if (@ARGV) {                    # explicit source files given
    @module_files = @ARGV;
    $all_src = 0;
} else {
    # Process all src/*.f90 files
    my $srcdir;
    if (-d '../src') {
        $srcdir = '../src';
    } elsif (-d "$ENV{PENCIL_HOME}/src") {
        $srcdir = "$ENV{PENCIL_HOME}/src";
    } else {
        die " Can't find suitable src/ dir\n";
    }
    print STDERR  "\$srcdir = <$srcdir>\n" if ($debug);

    @module_files = <$srcdir/*.f90>;
    $all_src = 1;
}

my $doc = Pencil::DocExtractor->new(quiet => $quiet);

foreach my $file (@module_files) {
    $doc->parse($file);
}

open OUT, "> $file";
print OUT $doc->longtable({ sort_files  => 1,
                            print_empty => 0 });
close OUT;

# ---------------------------------------------------------------------- #
sub printopts {
# Print command line options
    my $optsref = shift;
    my %opts = %$optsref;
    foreach my $opt (keys(%opts)) {
        print STDERR "\$opts{$opt} = `$opts{$opt}'\n";
    }
}
# ---------------------------------------------------------------------- #
sub usage {
# Extract description and usage information from this file's header.
    my $thisfile = __FILE__;
    local $/ = '';              # Read paragraphs
    open(FILE, "<$thisfile") or die "Cannot open $thisfile\n";
    while (<FILE>) {
        # Paragraph _must_ contain `Description:' or `Usage:'
        next unless /^\s*\#\s*(Description|Usage):/m;
        # Drop `Author:', etc. (anything before `Description:' or `Usage:')
        s/.*?\n(\s*\#\s*(Description|Usage):\s*\n.*)/$1/s;
        # Don't print comment sign:
        s/^\s*# ?//mg;
        last;                        # ignore body
    }
    $_ or "<No usage information found>\n";
}
# ---------------------------------------------------------------------- #
sub version {
# Return CVS data and version info.
    my $doll='\$';              # Need this to trick CVS
    my $cmdname = (split('/', $0))[-1];
    my $rev = '$Revision: 1.3 $';
    my $date = '$Date: 2007-08-22 15:56:46 $';
    $rev =~ s/${doll}Revision:\s*(\S+).*/$1/;
    $date =~ s/${doll}Date:\s*(\S+).*/$1/;
    "$cmdname version $rev ($date)\n";
}
# ---------------------------------------------------------------------- #

# End of file [name]
