pro rvid_line,field,mpeg=mpeg,png=png,tmin=tmin,tmax=tmax,max=amax,min=amin,$
  nrepeat=nrepeat,wait=wait,njump=njump,datadir=datadir,OLDFILE=OLDFILE,$
  test=test,proc=proc,exponential=exponential,map=map,tt=tt,noplot=noplot,mesh=mesh,$
  xdirection=xdirection, extension=extension, sqroot=sqroot, nocontour=nocontour, $
  squared=squared, exsquared=exsquared, against_time=against_time,func=func, $
  findmax=findmax,left_max=max_left,right_max=max_right, csection=csection, $
  transp=transp,global_scaling=global_scaling,points=points
;
; $Id: rvid_line.pro,v 1.14 2006-07-08 13:31:24 mee Exp $
;
;  Reads in 4 slices as they are generated by the pencil code.
;  The variable "field" can be changed. Default is 'lnrho'.
;
;  if the keyword /mpeg is given, the file movie.mpg is written.
;  tmin is the time after which data are written
;  nrepeat is the number of repeated images (to slow down movie)
;
;  Note:
;    proc=0 no longer works. Use datadir='data/proc0' instead.
;
;  Typical calling sequence
;  rvid_box,'bz',tmin=190,tmax=200,min=-.35,max=.35,/mpeg
;  rvid_line,'by',datadir='data/proc0',/mesh,/x
;  rvid_line,'XX_chiral',datadir='data/proc0',/x,min=0,max=1
;
;
default,proc,-1
default,amax,.05
default,amin,-amax
default,field,'lnrho'
default,datadir,'data'
default,nrepeat,0
default,njump,0
default,tmin,0.
default,tmax,1e38
default,wait,.03
default,extension,'xy'
;
if proc ge 0 then begin
  procstr=strtrim(string(proc))
  procstr=strtrim(procstr)
  procstr='0'
  file_slice=datadir+'/proc'+procstr+'/slice_'+field+'.'+extension
endif else begin
  file_slice=datadir+'/slice_'+field+'.'+extension
endelse
print, file_slice
;
;  Read the dimensions and precision (single or double) from dim.dat
;
mx=0L & my=0L & mz=0L & nvar=0L & prec=''
nghostx=0L & nghosty=0L & nghostz=0L
;
close,1
openr,1,datadir+'/'+'dim.dat'
readf,1,mx,my,mz,nvar
readf,1,prec
readf,1,nghostx,nghosty,nghostz
close,1
;
;  double precision?
;
if prec eq 'D' then unit=1d0 else unit=1e0
;
nx=mx-2*nghostx
ny=my-2*nghosty
nz=mz-2*nghostz
print,'nx=',nx
;
;
;  here a quick hack to force plotting in x-direction
;
if keyword_set(xdirection) then zaxisscale=findgen(nx) 
;print,'zaxisscale=',zaxisscale
;
;
t=0.*unit & islice=0
axz=fltarr(nx*ny)*unit
slice_xpos=0.*unit
slice_ypos=0.*unit
slice_zpos=0.*unit
slice_z2pos=0.*unit
;
if extension eq 'xy' then begin
  plane=fltarr(nx,ny)*unit
endif else if extension eq 'xz' then begin
  plane=fltarr(nx,nz)*unit
endif else if extension eq 'yz' then begin
  plane=fltarr(ny,nz)*unit
endif
if keyword_set(global_scaling) then begin
  first=1L
  close,1 & openr,1,file_slice,/f77
  while not eof(1) do begin
    if keyword_set(OLDFILE) then begin ; For files without position
      readu,1,plane,t
    endif else begin
      readu,1,plane,t,slice_z2pos
    endelse
    if keyword_set(exponential) then begin
      if (first) then begin
        amax=exp(max(plane))
        amin=exp(min(plane))
        first=0L
      endif else begin
        amax=max([amax,exp(max(plane))])
        amin=min([amin,exp(min(plane))])
      endelse
    endif else if keyword_set(sqroot) then begin
      if (first) then begin
        amax=sqrt(max(plane))
        amin=sqrt(min(plane))
        first=0L
      endif else begin
        amax=max([amax,sqrt(max(plane))])
        amin=min([amin,sqrt(min(plane))])
      endelse
    endif else begin
      if (first) then begin
        amax=max(plane)
        amin=min(plane)
        first=0L
      endif else begin
        amax=max([amax,max(plane)])
        amin=min([amin,min(plane)])
      endelse
    endelse
  end
  close,1
  print,'Scale using global min, max: ', amin, amax
endif
if keyword_set(transp) then begin
  if keyword_set(mesh) then begin
    zaxisscale=findgen(nx) 
  endif else begin
    pc_read_grid,object=grid
    zaxisscale=grid.x[nghostx:nghostx+nx-1]
  endelse
endif else begin
  if keyword_set(mesh) then begin
    zaxisscale=findgen(ny) 
  endif else begin
    pc_read_grid,object=grid
    zaxisscale=grid.y[nghosty:nghosty+ny-1]
  endelse
endelse
;
;  open MPEG file, if keyword is set
;
dev='x' ;(default)
if keyword_set(png) then begin
  set_plot, 'z'                   ; switch to Z buffer
  device, SET_RESOLUTION=[!d.x_size,!d.y_size] ; set window size
  itpng=0 ;(image counter)
  dev='z'
end else if keyword_set(mpeg) then begin
  ;Nwx=400 & Nwy=320
  Nwx=!d.x_size & Nwy=!d.y_size
  if (!d.name eq 'X') then window,2,xs=Nwx,ys=Nwy
  mpeg_name = 'movie.mpg'
  print,'write mpeg movie: ',mpeg_name
  mpegID = mpeg_open([Nwx,Nwy],FILENAME=mpeg_name)
  itmpeg=0 ;(image counter)
end
;
;  allow for jumping over njump time slices
;  initialize counter
;
ijump=njump ;(make sure the first one is written)
;
it=0
close,1 & openr,1,file_slice,/f77
while not eof(1) do begin
if extension eq 'xy' then begin
  axz=fltarr(nx,ny)*unit
endif else if extension eq 'xz' then begin
  axz=fltarr(nx,nz)*unit
endif else if extension eq 'yz' then begin
  axz=fltarr(ny,nz)*unit
endif

if keyword_set(OLDFILE) then begin ; For files without position
  readu,1,axz,t
end else begin
  readu,1,axz,t,slice_z2pos
end

if keyword_set(transp) then axz=transpose(axz)
default,csection,((size(axz))[2]+1)/2
axz=reform(axz)
if (size(axz))[0] gt 1 then begin
  axz=reform(axz[*,csection])
endif
if keyword_set(sqroot) then axz=sqrt(axz)
if keyword_set(squared) then axz=axz^2
if keyword_set(exsquared) then axz=exp(axz)^2
if keyword_set(func) then begin
  value=axz
  res=execute('axz='+func,1)
endif

if keyword_set(findmax) then begin
  findshock,axz,zaxisscale,leftpnt=leftpnt,rightpnt=rightpnt
  if it eq 0 then begin
    max_left=leftpnt
    max_right=rightpnt
  endif else begin
    max_left=[max_left, leftpnt]
    max_right=[max_right, rightpnt]
  endelse
endif

if it eq 0 then tt=t else tt=[tt,t]
if it eq 0 then map=axz else map=[map,axz]
it=it+1L
;
if keyword_set(test) then begin
  if not keyword_set(noplot) then print,t,min([axz,xy,xz,yz]),max([axz,xy,xz,yz])
end else begin
;repeat:
default,zaxisscale,findgen(ny) 
if keyword_set(xdirection) then zaxisscale=findgen(nx) 
  if t ge tmin and t le tmax then begin
    if ijump eq njump then begin
      if not keyword_set(noplot) then begin
        if keyword_set(points) then begin
          if keyword_set(exponential) then plot,zaxisscale,exp(axz),ps=-2,yr=[amin,amax] else plot,zaxisscale,axz,ps=-2,yr=[amin,amax]
        endif else begin
          if keyword_set(exponential) then plot,zaxisscale,exp(axz),yr=[amin,amax] else plot,zaxisscale,axz,yr=[amin,amax]
;plot,zaxisscale,axz
        endelse
      endif
      ;xyouts,.93,1.13,'!8t!6='+string(t,fo="(f6.1)"),col=1,siz=2
      if keyword_set(png) then begin
        istr2 = strtrim(string(itpng,'(I20.4)'),2) ;(only up to 9999 frames)
        image = tvrd()
        ;
        ;  make background white, and write png file
        ;
        ;bad=where(image eq 0) & image(bad)=255
        tvlct, red, green, blue, /GET
        imgname = 'img_'+istr2+'.png'
        write_png, imgname, image, red, green, blue
        itpng=itpng+1 ;(counter)
        ;
      end else if keyword_set(mpeg) then begin
        ;
        ;  write directly mpeg file
        ;  for idl_5.5 and later this requires the mpeg license
        ;
        image = tvrd(true=1)
        for irepeat=0,nrepeat do begin
          mpeg_put, mpegID, window=2, FRAME=itmpeg, /ORDER
          itmpeg=itmpeg+1 ;(counter)
        end
        print,islice,itmpeg,t,min([axz]),max([axz])
      end else begin
        ;
        ; default: output on the screen
        ;
        if not keyword_set(noplot) then print,islice,t,min([axz]),max([axz])
      end
      ijump=0
      wait,wait
      ;
      ; check whether file has been written
      ;
      if keyword_set(png) then spawn,'ls -l '+imgname
      ;
    end else begin
      ijump=ijump+1
    end
  end
  islice=islice+1
end
end
close,1
;
;  write & close mpeg file
;
if keyword_set(mpeg) then begin
  print,'Writing MPEG file..'
  mpeg_save, mpegID, FILENAME=mpeg_name
  mpeg_close, mpegID
end
;
;  reform map appropriately
;
nxz=n_elements(axz) & nt=it
map=reform(map,nxz,nt)

if not keyword_set(nocontour) then begin
  if keyword_set(against_time) then begin
     contour,transpose(exp(map)),tt,zaxisscale,/fil,nlev=60
  endif else begin
     contour,transpose(exp(map)),/fil,nlev=60
  endelse
endif
;
END
