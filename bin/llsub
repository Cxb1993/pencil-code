#!/usr/bin/perl -w
# Name:   llsub
# Author: Tobias Heinemann (theine@nordita.dk)
# Date:   23-Apr-2006
# CVS:    $Id: llsub,v 1.5 2006-05-17 22:47:57 theine Exp $
# Description:
#   Wrapper script to pass start.csh and run.csh (or both) to IBM Loadleveler
#   God knows why it does not take any useful command line options on its
#   own. (Or does it?)
# To Do:
# - Probably lots.

use strict;
use Getopt::Long;
use integer;

my $usage =
"Usage: $0 [options] script.csh
  Wrapper script to pass start.csh and run.csh (or both) to IBM Loadleveler.

Options:
  -h,  --help             \tPrint Usage information
  -n,  --ncpus            \tNumber of processors
  -t,  --tasks            \tNumber of tasks per node
  -q,  --queue            \tCluster queue
  -w,  --walltime         \tMaximum wall clock time
  -o,  --output           \tPipe the resulting script to standard output
";

# Default values
# (for testing on steno.dcsc.ku.dk -- feel free to modify and commit)
my $help = 0;
my $ncpus = 4;
my $tasks = 4;
my $queue = 'parallel_2gb';
my $walltime = '00:30:00';
my $output = 0;
my $pipe = "| llsubmit -";

# Get command line options
GetOptions('help'       => \$help,
	   'ncpus=i'    => \$ncpus,
           'tasks=i'    => \$tasks,
           'queue=s'    => \$queue,
           'walltime=s' => \$walltime,
           'output'       => \$output);

die $usage if (@ARGV == 0 or $help);

# Check whether we want to pipe to standard output
$pipe = "| cat" if ($output);

# tasks stands for "cpus per node" and ncpus should be a multiple thereof
my $message = "ncpus (-n) should be a multiple of tasks (-t)\n";
die $message unless ($ncpus % $tasks == 0);
my $nodes = $ncpus / $tasks;

# Working directory
my $pwd = `pwd`;
chomp ($pwd);

# Header instructions for Loadleveler
my $header =
"\#\!/bin/csh
# @ output = $pwd/\$(jobid).out
# @ error = \$(output)
# @ wall_clock_limit = $walltime
# @ notification  = never
# @ node_usage = not_shared
# @ job_type = parallel
# @ node = $nodes
# @ tasks_per_node = $tasks
# @ class = $queue
# @ queue\n";

# Read submit scripts and remove all comments
# (Comments easily interfere with Loadleveler directives)
# For now, also remove exit statements so that passing
# both start.csh and run.csh to llsub actually works
my $text;
my $script;
foreach $script (@ARGV) {
  open (SCRIPT,$script) or die "Couldn't open $script\n";
  while ( <SCRIPT> ) {
    $text = $text . $_ unless ($_ =~ '^#' or $_ =~ '^exit');
  }
  close (SCRIPT);
}

# Pass everything to llsubmit (or standard output)
open (PIPE, $pipe);
print PIPE $header;
print PIPE $text;
close (PIPE);
