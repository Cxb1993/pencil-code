#!/bin/sh
#  -*-Perl-*-
#======================================================================#
# Run the right perl version:
if [ -x /usr/local/bin/perl ]; then
  perl=/usr/local/bin/perl
elif [ -x /usr/bin/perl ]; then
  perl=/usr/bin/perl
else
  perl=`which perl| sed 's/.*aliased to *//'`
fi

exec $perl -x -S $0 "$@"     # -x: start from the following line
#======================================================================#
#! /Good_Path/perl -w
# line 17

# Name:   auto-test
# Author: wd (Wolfgang.Dobler@kis.uni-freiburg.de)
# Date:   12-Aug-2002
# CVS: $Id: auto-test,v 1.73 2006-06-07 03:31:34 ajohan Exp $
# Description:
#   Test compilation and results on a set of sample directories to
#   validate the pencil code. Uses Perl because I started to do this with
#   the Test/Test::Harness module and because we need to do pattern
#   matching to extract the relevant output lines.
# To Do:
# - Add an option to exclude those tests that use MPI
# - Remove directory from /var/tmp when encountering Ctl-c
# - Treat `cvs update' as separate stage that can be `OK' or not
use strict;
use constant QUIET       => 1;
use constant LOCK_FAILED => 128; # return status if we can't get lock
use Cwd;
use POSIX qw(floor);
use Getopt::Long;
use vars qw{ %failed $test_status }; # do we really need global vars here?
use IPC::Open2;

# ---------------------------------------------------------------------- #
# Test the following subdirs of samples/ :
my @sampdir = qw( conv-slab cosmicray kin-dynamo geodynamo
                  helical-MHDturb interlocked-fluxrings mdwarf
                  0d-tests/heating_ionize
                  0d-tests/heating_noionize conv-slab-noequi
                  1d-tests/solar-atmosphere 1d-tests/sod_10
                  2d-tests/Kelvin-Helmholtz-disc
                  2d-tests/selfgravitating-shearwave
                  interstellar
                  dust-vortex MRI-turbulence_hyper random_uu_particles
                  chiral-diffusion backwards-compatible testfield meissner
                  2d-tests/globaldisc
                );
# Test the following subdirs of runs/ :
#my @runsdir = qw( radiation/solar1d4);
my @runsdir = qw( );
# ---------------------------------------------------------------------- #
## Override for testing:
#@sampdir = qw( conv-slab );
#@runsdir = qw(  );

my $ntests      = 0;                 # total number of tests run
my $failed      = 0;
my $remove_lock = 0;
my $failure_message = '';
my $tmpdir      = "/var/tmp/pencil-tmp-$$";
my $lockdir     = '/var/tmp';     # put / check for lock file here
my $lockfile    = "$lockdir/pencil-auto-test.pid";
my $noheader    = "Couldn't find header line";
my $headerpat   = '^-*\s*(-+[A-Za-z0-9_]+)+-*\s*$'; # regexp for header line
my $cfloat = '([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?'; # regexp
                                                               # for C float
my $res;
my ($t_comp,$t_start,$t_run,$t_res) = (1,1,1,1); # test everything by default
my (%opts);			# variables written by GetOptions
my $help = 0;
(my $cmdname = $0) =~ s{.*/}{};

my $usage =
"Usage:  $cmdname [options] [dir1 [dir2 [..]]]
  Test compilation and results on a set of sample directories (or on the
  list of directories given in the command line) to validate the pencil code.
  Uses Perl because we need to do pattern matching to extract the relevant
  output lines.
    If you don't have a data directory, $cmdname creates a link to
  $tmpdir -- both link and directory are removed after
  each run.
Options:
  -h,  --help              \tShow usage overview
  -v,  --version           \tPrint version number
  -C,  --clean             \tClean up (make cleann) before compiling
  -c,  --compile-only      \tTest compilation only
  -n,  --norun             \tTest compilation and starting only
  -l,  --list              \tList test directories (don't run any tests)
  -t,  --time              \tPrint CPU time used
  -D,  --pencil-home=<dir> \tSet PENCIL_HOME directory to <dir>
  -N,  --nice=<n>          \tRun tests with nice value <n>
  -j,  --jobs=<n>          \tPass through -j option to make
  -d,  --datadir           \tUse mkdir if data/ is needed, don't ln -s /var/tmp
  -s,  --short             \tPrint short directory names only
  -p,  --postproc=PP       \tApply postprocessor PP to output from make
       --rsh=RSH-PROG      \tUse the specified program as to get a remote shell
       --nodelist=NODE1,.. \tUse a forked remote shell to parallelize
       --no-summary        \tDo not summarize at the end
       --nolock            \tIgnore and don't write lock file
       --debug             \tPrint lots of debugging output
";

## Process command line options
eval {
    Getopt::Long::config("bundling"); # makes single-letter options case-sensitive
};
GetOptions(\%opts,
	   qw( -h   --help
	       -v   --version
	            --debug
	       -C   --clean
	       -c   --compile-only
	       -n   --norun
	       -l   --list
	       -t   --time
               -D=s --pencil-home=s
	       -N=s --nice=s
	       -j=n --jobs=n
	       -d   --datadir
	       -s   --short
	       -p=s --postproc=s
                    --rsh=s
                    --nodelist=s
	            --no-summary
	            --nolock
	       ));

if ($opts{'h'} || $opts{'help'}) { $help=1; die "$usage\n"; }
if ($opts{'v'} || $opts{'version'}) {
    $help=1;
    die '$Id: auto-test,v 1.73 2006-06-07 03:31:34 ajohan Exp $ ' . "\n";
}
if ($opts{'c'} || $opts{'compile-only'}) { $t_start=$t_run=$t_res=0 };
if ($opts{'n'} || $opts{'norun'}) { $t_run=0 };
my $debug       = (              $opts{'debug'}       || 0    );
my $clean       = ($opts{'C'} || $opts{'clean'}       || 0    );
my $list_only   = ($opts{'l'} || $opts{'list'}        || 0    );
my $time        = ($opts{'t'} || $opts{'time'}        || 0    );
my $pencil_home = ($opts{'D'} || $opts{'pencil-home'} || "$ENV{PENCIL_HOME}"
                   || '');
my $niceval     = ($opts{'N'} || $opts{'nice'}        || 0    );
my $makejobs    = ($opts{'j'} || $opts{'jobs'}        || 0    );
my $datadir     = ($opts{'d'} || $opts{'datadir'}     || 0    );
my $short       = ($opts{'s'} || $opts{'short'}       || 0    );
my $postproc    = ($opts{'p'} || $opts{'postproc'}    || ''   );
my $RSH         = (              $opts{'rsh'}         || 'ssh');
my $nodelist    = (              $opts{'nodelist'}    || 0    );
my $nosummary   = (              $opts{'no-summary'}  || 0    );
my $nolock      = (              $opts{'nolock'}      || 0    );

my @exit_status=('setting up directory','cleaning up','compilation','starting','running','results');

my $makeopts  = '';
if ($makejobs) { $makeopts = "-j $makejobs"; }

my $nice="";
if ($niceval != 0) { $nice = "\\nice -n $niceval" };
# Note: Csh's builtin `nice' cmd has a different calling syntax, so we
# need to use ther real nice cmd here.

## Debugging output:
if ($debug) {
    eval("use Data::Dumper");	# Need eval here to calm down compiler
    print STDERR Dumper(\%opts);
    print STDERR
	"(\$t_comp,\$t_start,\$t_run,\$t_res)"
	. " = ($t_comp,$t_start,$t_run,$t_res)\n";
    print STDERR 
	"(\$debug,\$help,\$short)           "
	. " = ($debug,$help,$short)\n";
}

# $t_comp .. $t_res form a hierarchy: We can't test running without
# compiling and starting
$t_start &&= $t_comp;
$t_run   &&= $t_start;
$t_res   &&= $t_run;

# Check for lock file and write one
handle_lock_file() or exit(LOCK_FAILED);

# Remember current directory
my $cwd = `pwd`; chomp($cwd);

# Make sure we are in the top directory and have the right PATH
die "Need to set environment variable PENCIL_HOME\n" 
    unless (defined($pencil_home));
my $topdir = "$pencil_home";
chdir $topdir;
$ENV{PATH} .= ":$pencil_home/bin";

# Autoflush stdout:
$| = 1;

@ARGV = grep { /./ } @ARGV;	# Eliminate empty @ARGV list (needed under
				# OSF1, no clue why)

if ($list_only) {
    print "Test directories:\n"
}

if (@ARGV) {			# Process dirs given in cmd line
    @ARGV = map { s{^(?!/)}{$cwd/}; $_ } @ARGV; # Make `.' and similar work
    for my $d (@ARGV) {
	test_rundir("$d",$makeopts);
    }
    if ((scalar @ARGV)==1) {
      if (%failed) {
        keys %failed;                  # this is a no-op -> remove
        my ($d,$phase) = each %failed; # ..and this is bizarre
        my $exit_code=1;
        foreach my $status (@exit_status) {
          exit $exit_code if ($phase =~ /$status/ );
          $exit_code++;
        }
        exit $exit_code;
      }
    }
} else {			# No dirs in cmd line -> do standard program
    if ($nodelist) {
        my @queue;
        for my $d (@sampdir) {
            unshift @queue, "$topdir/samples/$d";
        }
        # Process dirs in runs/ directory
        if (@runsdir) {
            if (-d "$topdir/runs") {
                for my $d (@runsdir) {
		    unshift @queue, "$topdir/runs/$d";
                }
            } else {
                print "Not checking in $topdir/runs : no such directory\n";
            }
        }
        my @nodes=split /,/ , $nodelist;
        my $passthru_opts = '';
        if ($clean)    { $passthru_opts .= '-C '; }
        if ($makejobs) { $passthru_opts .= " -j $makejobs"; }
        if ($opts{'c'} || $opts{'compile-only'}) { $passthru_opts .= ' -c'; }
        do_tests_in_parallel(\@queue,\@nodes,$passthru_opts);
    } else {
        # Process dirs in samples/ directory
        for my $d (@sampdir) {
            test_rundir("$topdir/samples/$d",$makeopts);
        }
        # Process dirs in runs/ directory
        if (@runsdir) {
            if (-d "$topdir/runs") {
                for my $d (@runsdir) {
		    test_rundir("$topdir/runs/$d",$makeopts);
                }
            } else {
                print "Not checking in $topdir/runs : no such directory\n";
            }
        }
    }
}

# ---------------------------------------------------------------------- #
sub handle_lock_file {
# Check for existing lock file and exit (if there is one) or write one.

    return(1) if ($nolock);     # skip it

    my $got_lock = 0;           # need to deserve this first..

    if (-e $lockfile) {         # lock file exists -> get and check pid
        open(LOCK,"< $lockfile") or die "Cannot read <$lockfile>";
        my $pid = <LOCK>;
        close LOCK;
        $pid =~ s/^\s*([0-9]+)\s*$/$1/
          or die "$lockfile contains garbage instead of pid: <$pid>\n";
        my $pid_cmd = `ps -p $pid -o args=`;

        # Who runs with pid from lockfile?
        if ($pid_cmd =~ /^\S*$/) { # no process for this pid
            print "Removing stale lock file (no process with pid $pid)\n";
            unlink $lockfile or die "Cannot unlink <$lockfile>\n";
            $got_lock = 1;
        } elsif ($pid_cmd =~ /auto-test\s*$/) { # pid belongs to auto-test
            print "Failed getting lock (lock file is $lockfile):\n"
                  . "Another auto-test is running as pid $pid\n"
                  . "You can use `auto-test --nolock' to ignore the lock file\n";
            $got_lock = 0;
        } else {                # pid belongs to other process
            print "Failed getting lock (lock file is <$lockfile>):\n"
                  . "Another process runs as pid $pid (this is weird...)\n"
                  . "You can use `auto-test --nolock' to ignore the lock file\n";
            $got_lock = 0;
        }
    } else {
        print STDERR "handle_lock_file: Found no lock file\n" if ($debug);
        $got_lock = 1;
    }

    # Write our own lock file
    if ($got_lock) {
        print STDERR "Writing <$$> to lock file $lockfile\n" if ($debug);
        open(LOCK, "> $lockfile")
          or die "Cannot open $lockfile for writing\n";
        print LOCK "$$\n";
        close LOCK or die "Cannot close $lockfile\n";
        $remove_lock = 1;       # clean up lock at END
    }

    print STDERR "handle_lock_file: \$got_lock = $got_lock\n" if ($debug);

    unless ($got_lock) {
        $failed++;
        $failure_message .= "Couldn't get lock file\n";
    }
    return ($got_lock);
}
# ---------------------------------------------------------------------- #
sub do_tests_in_parallel {
# Distribute auto-tests over nodes contained in $nodelist
    my $jobs          = shift;
    my $nodelist      = shift;
    my $passthru_opts = shift;

    my @queue=@$jobs;
    my %nodes;

    for my $node (@$nodelist) {
	$nodes{$node}{'busy'} = 0;
	$nodes{$node}{'pid'}  = 0;
    }
    my $running = 0;
    my $queued = scalar @queue;
    while ((scalar @queue) || $running) {
	if (scalar @queue) {
	    foreach my $node (keys %nodes) {
		next if $nodes{$node}{'busy'};
		my $job = shift @queue;
		$nodes{$node}{'busy'}=$job;
		$ntests++;
		$running++;
		if (! ($nodes{$node}{'pid'} = fork)) {
		    my $nodeb=$node;
		    exec "$RSH $node auto-test --no-summary $passthru_opts $job | sed 's/^/$nodeb : /'";
		    exit 0;
		}
	    }
	}
	if ($running) {
	    my $pid = wait;
	    if ($pid != -1) {
		my $result = $?;
		$running--;
		foreach my $node (keys %nodes) {
		    if ($nodes{$node}{'pid'} == $pid) {
			my $exit_code = ($result >> 8);
			$failed{$nodes{$node}{'busy'}}
			  = $exit_status[$exit_code-1] if ($exit_code);
			$nodes{$node}{'busy'} = 0;
			$nodes{$node}{'pid'}  = 0;
			last;
		    }
		}
	    }
	}
    }
}
# ---------------------------------------------------------------------- #
sub my_ok {
# Similar to Test's and Test::Harness' ok() function: consider success if
# first two argumets are equal, otherwise report a problem and print the
# third argument (which should normally contain the output from the shell
# calls that we are normally testing here).
# Args #4 and #5 are the current run directory and the phase (compilation,
# starting, running) we are in.

    my $arg1 = shift;
    my $arg2 = shift;
    my $mesg = (shift || "<No diagnostics>");
    chomp($mesg);
    my $dir = shift;
    my $phase = shift;
    my $quiet = (shift || 0);

    # Allow for calls like `ok(0)' or `ok(1)':
    if (!defined($arg2)) {
	$arg2 = $arg1 ? $arg1 : 1;
    }
    if ($arg1 eq $arg2) {
	print "  ok\n" unless ($quiet);
    } else {
	print "  not ok:\n$mesg\n";
	$test_status = 1;
	# report only first failure:
	$failed{$dir} = $phase unless defined($failed{$dir});
    }
}
# ---------------------------------------------------------------------- #
sub test_shell_cmd {
    my $cmd = shift;
    my $dir = (shift || "<Unknown directory>");
    my $phase = (shift || "<Unknown phase>");
    my $quiet = (shift || 0);	# flag for suppressing the `ok'

    if ($debug) { print STDERR "Running `$cmd`" };
    my $res = (`$cmd 2>&1` || "Very BAD: `$cmd` returned undef");
    my $cmdstatus = $?;
    if ($debug) { print STDERR " ..done \n" };
    chomp($res);
    if (($phase eq 'compilation') && ($postproc ne '')) {
	print STDERR "Postprocessing output..\n" if ($debug);
	$res = postprocess($res);
    }
    my_ok($cmdstatus,0,$res,$dir,$phase,$quiet); # $? = 0 means success
    $res;		   # Return output so we can analyze it if desired
}
# ---------------------------------------------------------------------- #
sub test_compile {
# Test compilation only
    if ($t_comp) {
	my $dir = shift;
	my $makeopts = shift;
	print "    Compiling..         ";
# First pc_setupsrc, then make clean (if requested). Must be done in this order
# as pc_setupsrc links the Makefile to the run directory.
    test_shell_cmd("pc_setupsrc --pencil-home $pencil_home",$dir,"setting up directory",QUIET);
	return 'ERROR calling pc_setupsrc' if ($test_status);
	if ($clean) {
	    test_shell_cmd('cd src; make cleann',$dir,"cleaning up",QUIET);
	    return 'ERROR running make cleann' if ($test_status);
	}
	test_shell_cmd("cd src;$nice make $makeopts",$dir,"compilation");
    }
}
# ---------------------------------------------------------------------- #
sub test_start {
# Test starting only
    if ($t_start) {
	my $dir = shift;
	print "    Starting..          ";
	test_shell_cmd("$nice start.csh",$dir,"starting");
    }
}
# ---------------------------------------------------------------------- #
sub test_run {
# Test running only (does not analyze output, but returns it)
    if ($t_run) {
	my $dir = shift;
	print "    Running..           ";
	$res = test_shell_cmd("$nice run.csh",$dir,"running");
    }
}
# ---------------------------------------------------------------------- #
sub test_results {
# Analyze results from code
    if ($t_res) {
	my $dir = shift;
	my ($rdmsg,$diagn);
	print "    Validating results..";
#	print "    [Not yet implemented]";
	my @output = split(/[\n\r]+/,$res);
	my_ok(0,0,"",$dir,"results","quiet");
	my @foutput = extract_results(\@output); # filtered output
	if ($foutput[0] ne "$noheader") {
	    my @ref_output = read_lines("reference.out",$rdmsg);
	    if ($rdmsg) {
		print " [$rdmsg]\n";
	    } else {
		my $comp = compare_results(\@ref_output,\@foutput,$diagn);
		my_ok($comp,1,$diagn,$dir,"results");
	    }
	} else { # No header line found
	    my_ok(0,1,join("\n",@output),$dir,"results");
	}
    }
}
# ---------------------------------------------------------------------- #
sub extract_results {
# Extract result lines (header line and numerical data) from the output of
# the code
    my $lineptr = shift;
    my @lines = @$lineptr;

    my @results = ();
    my @labels = ();
    my $body = 0;		# true after header line
    my $ncols;

    line: foreach my $line (@lines) {
	unless ($body) {
	    # Before or at header line
	    next line unless ($line =~ /$headerpat/);
	    push @results, $line;
	    $body = 1;
	    @labels = grep { /\S/ } split(/-+/,$line); # ignore empty labels
	    $ncols = @labels;
	} else {
	    # After header line
	    next unless ($line =~ /^(\s+$cfloat){$ncols}\s*$/);
	    push @results, $line;
	}
    }
    if ($body) {
	@results;
    } else {
	($noheader);
    }
}
# ---------------------------------------------------------------------- #
sub read_lines {
# Read file an return hash of non-empty lines
    my $file = shift;
    my @lines = ();
    my $msg = "";

    {
	local $/ = undef;	# read in whole file
	if (open (REF, "< $file")) {
	    @lines = grep { /\S/ } split(/[\n\r]+/,<REF>);
	    # Remove leading comment sign from header line:
	    $lines[0] =~ s/^(\s*)#/$1 /;
	} else {
	    $msg = "Couldn't open $file";
	}
    }
    $_[0] = $msg;
    @lines;
}
# ---------------------------------------------------------------------- #
sub compare_results {
# Compare two arrays of lines linewise; if all lines are the same, return
# 1; if not, return 0 and write report to third argument
    my $arr1 = shift;
    my $arr2 = shift;

    my @pref = ("< ", "> ", "  "); # prefixes to mark differing lines
    my $n1 = $#$arr1;
    my $n2 = $#$arr2;
    my $N = ($n2>$n1 ? $n2 : $n1);
    my $diagn = "";
    my $equal = 1;
    for my $i (0..$N) {
	my $line1 = ($$arr1[$i] || ""); chomp $line1;
	my $line2 = ($$arr2[$i] || ""); chomp $line2;
	unless (compare_lines_fuzzily($line1,$line2)) {
	    $diagn .= $pref[0] . $line1 . "\n" if ($line1);
	    $diagn .= $pref[1] . $line2 . "\n" if ($line2);
	    $equal = 0;
	} else {
	    if ($i == 0) {	# Keep header line for easier reading
		$diagn .= $pref[2] . $line1 . "\n";
	    }
	}
    }
    $_[0] = $diagn;		# the remaining argument (was the third one)
    $equal;
}
# ---------------------------------------------------------------------- #
sub compare_lines_fuzzily {
# Compare the numerical values in two lines fuzzily. Return 1 if numbers
# are approximately equal (differ by 1 or less in the last decimal), zero
# otherwise.
    my $xline = shift;
    my $yline = shift;

    my $equal = 1;

    if ($xline =~ /$headerpat/) { # header lines --> string comparison
	$equal = 0 unless ($xline eq $yline);
    } else {			  #  diagnostic lines --> fuzzy comparison
	my @x = split(/\s+/,$xline);
	my @y = split(/\s+/,$yline);
	@x = grep(/[0-9]/, @x);	# weed out empty entries
	@y = grep(/[0-9]/, @y);

	return 0 unless ($#x == $#y); # lengths must match
	foreach my $i (0..$#x) {
	    my ($x,$y) = ($x[$i], $y[$i]);
	    $equal = 0 unless (compare_numbers_fuzzily($x,$y));
	}
    }

    return $equal;
}
# ---------------------------------------------------------------------- #
sub compare_numbers_fuzzily {
# Compare two numbers and return true if they differ only by one in the
# last digit, else false.
    my $x = shift;
    my $y = shift;

    my $debug = 0;

    # Regexp for general float, groups into pre-exponent and
    # post-exponent part
    my $numeric = '((?:[+-]?)(?=\d|\.\d)\d*(?:\.\d*)?)((?:[EeDd](?:[+-]?\d+))?)';
    my ($x1,$x2) = ($x =~ /^\s*$numeric\s*$/);
    $x2 = '' unless defined($x2);
    my ($y1,$y2) = ($y =~ /^\s*$numeric\s*$/);
    $y2 = '' unless defined($y2);

    # Are $x, $y really numeric?
    unless(defined($x1) && defined($y1)) {
	warn "Not a numerical value: <$x> or <$y>\n";
	return 0;
    }

    # Choose the longer string for decrementing/incrementing, so we
    # correctly compare stuff like [1.3599, 1.36] (succeeds) and [1.3598,
    # 1.36] (fails) in both directions.
    if (length($x1) < length($y1)) {
	($x,$x1,$x2, $y,$y1,$y2) = ($y,$y1,$y2, $x,$x1,$x2);
    }

    # Do comparison
    $x1 =~ /([+-]?[0-9]*)\.?([0-9]*)/;
    my ($xint,$xfrac) = ($1, $2);

    die "Cannot split <$x1> into int/fract parts (should not happen)"
      unless defined($xint);
    my $delta;
    if (length($xfrac) > 0) {
	$delta = '0.' . '0'x(length($xfrac)-1) . '1';
    } else {
	$delta = 1;
    }
    my $x1_p = $x1 + $delta;
    my $x1_m = $x1 - $delta;
    ($x1_m, $x1_p) = sort  { $a <=> $b } $x1_m, $x1_p;
    my ($x_m, $x_p) = ("${x1_m}${x2}", "${x1_p}${x2}");

    printf "%8s -> %8s -> <%6s>.<%6s> -> %8s -> [%8s, %8s]\n",
      $x, $x1, $xint, $xfrac, $delta, $x_m, $x_p   if ($debug);

    if (($y >= $x_m) && ($y <= $x_p)) {
	return 1;
    } else {
	return 0;
    }
}
# ---------------------------------------------------------------------- #

sub test_rundir {
# Test compilation, starting, running and results
    my $dir = shift;
    my $makeopts = shift;
    my $created_datadir = 0;

    $test_status = 0;		#  so far, everything is OK

    # Indicate current run directory in process name (for ps)
    my $shortdir = $dir;
    $shortdir =~ s{^$topdir/}{};	# remove common directory prefix
    $shortdir =~ s{^samples/}{};	# remove leading 'samples/'
    $0 =~ s/^\s*(\[.*?\])?\s*/[$shortdir] /;

    # Go to directory and identify it
    if (! -d $dir) {
	print STDERR "No such directory: $dir\n";
	return;
    }
    chdir $dir;
    my $cwd = cwd();
    if ($short) { $cwd =~ s{.*pencil[^/]*/}{}i };
    if ($list_only) {
	print "$cwd\n";
	return;
    }
    print "\n", $cwd, ":\n";
    $ntests++;

    # Make sure we have everything we need
    if (! defined(-e 'src/run.f90')) { # has `pc_setupsrc' been run yet?
	my $res = `pc_setupsrc --pencil-home $pencil_home 2>&1`;
	if ($?) {
	    print "    Problems running pc_setupsrc:\n", $res;
	}
    }

    # Test compilation
    test_compile($dir,$makeopts);
    return if ($test_status);

    # Ensure we have a data directory and test starting and running
    return unless ($t_start);	# no need for a data directory unless we start
				# the code
    if (! -d 'data') {
      if (!$datadir) {
        if (-l 'data') {
          print "        data is file or empty link;\n"
          . "        removing and generating data -> $tmpdir\n";
          system("rm", "data");
          }
       else {
         print "        No data directory; generating data -> $tmpdir\n";
         }
      system("mkdir -p $tmpdir; ln -s $tmpdir data");
      $created_datadir = 1;
      }
      else {
        if (-l 'data') {
          print "        data is file or empty link;\n"
          . "        removing and generating data directory \n";
          system("rm", "data");
          }
        else {
          print "        No data directory; generating data directory\n";}
        system("mkdir -p data");
      }
    }
    test_start($dir);
    goto cleanup if ($test_status);
    # we only get here if compiling and starting was OK
    test_run($dir);
    return if ($test_status);

    # need to check the output here..
    test_results($dir);

    # Clean up if necessary
  cleanup:
    if ($created_datadir) {
	system("rm", "data");
	system("rm", "-r", "$tmpdir");
    }
}
# ---------------------------------------------------------------------- #
sub s_to_hms{
# Convert no. of seconds to [ddd][hh:]mm:ss string
    my $secs = shift;
    my $ss = $secs % 60;
    my $mm = floor($secs/60) % 60;
    my $hh = floor($secs/3600) % 24;
    my $dd = floor($secs/86400);

    my $string = sprintf("%02d:%02d", $mm,$ss);
    if ($hh) { $string = sprintf("%02d:", $hh) . $string };
    if ($dd) { $string = sprintf("%dd", $dd) . $string };

    $string;
}
# ---------------------------------------------------------------------- #
sub postprocess {
    # Clean compiler output with postprocessor
    my $text = shift;

    print STDERR "  PP: Cleaning compiler output with <$postproc>\n"
      if ($debug);
    # open read/write pipe to postprocessor (see `man perlipc')
    my $pid = open2(\*POSTPROCD,\*UNPROCD, "$postproc 2>&1");
    die "Couldn't start $postproc" unless defined($pid);
    # fork() a child to avoid deadlock if $text is large
    my $child_id;

    if ($child_id=fork()) {		# parent --> read output
	close UNPROCD;		# important
	local $/ = undef;	# get it all at once
	$text = <POSTPROCD>;
	close POSTPROCD;	# not necessary, I guess
	waitpid($child_id,0);	# wait for child to finish to avoid zombie
	wait();			# bizarre enough there is another zombie..
    } else {			# child --> write to postproc
	die "Cannot fork: $!" unless defined($child_id);
	$nosummary = 1;		# don't waffle when exiting
 	close POSTPROCD;	# apparently not necessary
	print UNPROCD $text;
	close UNPROCD;
	exit 1;			# irrelevant
    }
    print STDERR "  PP: done postprocessing\n" if ($debug);
    $text;
}
# ---------------------------------------------------------------------- #

## Summarize results
END {
    unless ($help || $nosummary || $list_only) {
	print "\n" . "-" x 70 . "\n";

        # Print failure header that can be idedntified by pencil-test
        if ($failed || %failed) {
            print "### auto-test failed ###\n";
        }

        # Failed outside individual tests (e.g. other auto-test is running)
        if ($failed) {
            print "$failure_message";
        }

        # Failed during some of the individual tests
	if (%failed) {
	    print "Failed ", scalar(keys %failed),
	      " test(s) out of $ntests:\n";
	    while (my ($dir,$phase) = each %failed) {
		print "  $dir ($phase)\n";
	    }
	} else {
	    if ($ntests == 1) {
                print "Test succeeded.\n";
            } elsif ($ntests > 1) {
                print "All $ntests tests succeeded.\n";
            }
	    elsif (($ntests < 1) && ! $failed) {
                print "There was no test to run???\n";
            }
	}
	if ($time) {
	    my @t = times();
	    print "\nCPU time (including compilation): ",
	          s_to_hms($t[2]) . "u ",
                  s_to_hms($t[3]) . "s\n";
	}
    }

    # Remove lock file
    if ($remove_lock) {
        unlink $lockfile or warn "Couldn't remove lockfile <$lockfile>\n";
    }
}

# End of file auto-test
