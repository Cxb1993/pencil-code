###                          -*-Makefile-*- (for Emacs)
### $Id: Makefile.src,v 1.270 2007-01-24 14:10:24 nilshau Exp $
### Makefile for modular pencil code

## Default settings: they can be overwritten by src/Makefile$(PC_META_TYPE).local
## which should be present in each local to run directory.

LIBSIG=
LDONLYFLAGS=
LD_MPI=-lmpi
DEBUGFLAGS=-g

MPICOMM      =   mpicomm
GLOBAL       = noglobal
GRID         =   grid
IO           =   io_dist
FOURIER      = nofourier
POWER        = nopower_spectrum
DEBUG        =   debug_c

HYDRO        = nohydro
VISCOSITY    =   viscosity
DENSITY      = nodensity
ENTROPY      = noentropy
MAGNETIC     = nomagnetic
RADIATION    = noradiation
PSCALAR      = nopscalar
CHIRAL       = nochiral
DUSTVELOCITY = nodustvelocity
DUSTDENSITY  = nodustdensity
INTERSTELLAR = nointerstellar
COSMICRAY    = nocosmicray
COSMICRAYFLUX= nocosmicrayflux
EOS          =   eos_idealgas
STRUCT_FUNC  = nostruct_func
INITCOND_SPEC= noinitcond_spec
SHOCK        = noshock
TESTFIELD    = notestfield

BORDER_PROF  = noborder_profiles

GRAVITY      = nogravity
SELFGRAVITY  = noselfgravity
FORCING      = noforcing
SHEAR        = noshear
TIMEAVG      = notimeavg
SPECIAL      = nospecial

PARTICLES_MAIN         = noparticles_main
PARTICLES_SUB          = noparticles_sub
PARTICLES              = noparticles
PARTICLES_RADIUS       = noparticles_radius
PARTICLES_NUMBER       = noparticles_number
PARTICLES_SELFGRAVITY  = noparticles_selfgravity
PARTICLES_NBODY        = noparticles_nbody

PLANET           =  noplanet

SHOCK_PROFILE = shock_profiles/noshock_profile
SHOCK_FINDER  = shock_finder

POISSON      = nopoisson

TIMESTEP     = timestep

## Extra compiler flags (what does the `GENERAL' refer to?)
FFLAGS_GENERAL=
CFLAGS_GENERAL=

## Single vs. double precision
REAL_PRECISION=default

# Default double flags (can be overwritten in machine-specific section):
FFLAGS_DOUBLE=-r8
CFLAGS_DOUBLE=-DDOUBLE_PRECISION

## Overwrite settings that are local to each run directory
include Makefile$(PC_META_TYPE).local

## Double precision settings and similar. Must be included _after_
## Makefile.local, so we can set REAL_PRECISION=double there
include Makefile.inc

## Compile files with particle programming structure if particles are chosen.
ifneq ($(PARTICLES),noparticles)
  PARTICLES_MAIN =   particles_main
  PARTICLES_SUB  =   particles_sub
endif

## Check for outdated features
ifeq ($(GRAVITY),nograv)
nograv_message:
	@echo ";;; Cannot compile:"
	@echo ";;;    'nograv.f90' has been renamed to 'nogravity.f90'"
	@echo ";;;"
	@echo ";;; Please update your src/Makefile.local, e.g. via cut+paste:"
	@echo ";;;"
	@echo ";;;      perl -pi'~' -e 's/(GRAVITY\s*\=\s*)nograv([^a-zA-Z])/\$$1nogravity\$$2/' $(FROM_PARENT)Makefile.local"
	@echo ";;;"
	exit 1
endif
ifeq ($(GRAVITY),grav_z)
grav_z_message:
	@echo ";;; Cannot compile:"
	@echo ";;;    The file 'grav_z.f90' no longer exists"
	@echo ";;; All functionality from grav_z.f90 is in gravity_simple.f90"
	@echo ";;;"
	@echo ";;; Please update your src/Makefile.local, e.g. via cut+paste:"
	@echo ";;;"
	@echo ";;;      perl -pi'~' -e 's/(GRAVITY\s*\=\s*)grav_z([^a-zA-Z])/\$$1gravity_simple\$$2/' $(FROM_PARENT)Makefile.local"
	@echo ";;;"
	exit 1
endif
ifeq ($(GRAVITY),grav_r)
grav_r_message:
	@echo ";;; Cannot compile:"
	@echo ";;;    'grav_r.f90' has been renamed to 'gravity_r.f90'"
	@echo ";;;"
	@echo ";;; Please update your Makefile.local, e.g. via cut+paste:"
	@echo ";;;"
	@echo ";;;      perl -pi'~' -e 's/(GRAVITY\s*\=\s*)grav_r([^a-zA-Z])/\$$1gravity_r\$$2/' $(FROM_PARENT)Makefile.local"
	@echo ";;;"
	exit 1
endif

## Default settings
FC=f90
FFLAGS=-O3
FFLAGS=
F90FLAGS=
F77=f90
F77FLAGS=
CFLAGS=-O3 -DFUNDERSC=1
FCCLEANER=
LIBMPISUFFIX=
MAKEOPTS=

#
# Defaults for external libraries
#
CFLAGS_FFTW3=
xFFLAGS_FFTW3=
LD_FFTW3=
CFLAGS_FFTW2=
FFLAGS_FFTW2=
LD_FFTW2=

## The following block (`Begin/End machine dependent') specifies compilers
## and switches for given architectures and machine names. See
## `perldoc adapt-mkfile' for full documentation of the syntax.
## Compiler flags:
##   FFLAGS are used by both the F90 compiler $(FC) and $(F77);
##   F90FLAGS are only used by $(FC)
##   F77FLAGS are only used by $(F77)

### Begin machine dependent

## IRIX64:
## SGI
#FC=f90
#FFLAGS= -64 -O3 -mips4
#FFLAGS= -auto_use mpi_interface -64 -O3 -macro_expand  #(gridur|embla|balder)
#FFLAGS= -auto_use mpi_interface -64 -O3 -C -macro_expand  #(sander|antares)
#FFLAGS= -pfalist -64 -O3 -mips4 -r10000 -C -macro_expand  #(Grand)
#FFLAGS= -64 -O3 -mips4 -r12000 #(Ukaff)
#FFLAGS= -64 -O3 -auto_use mpi_interface -mips4 #(ukaff|origin)
#FFLAGS= -64 -O3 -mips4 -r12000 -flist #(green)
#FFLAGS= -64 -O3 -mips4 -r12000 #(wrenstandard)
#FFLAGS= -64 -O3 -mips4 -r12000 -LNO:cs1=32k:cs2=8M #(wrencache)
#FFLAGS= -64 -O3 -mips4 -r12000 -LNO:cs1=32k:cs2=8M -I/share/apps/unsupported/pacx/standard/include -L/share/apps/unsupported/pacx/standard/lib #(wrenpacx)
#LD_MPI= -L/share/apps/unsupported/pacx/standard/lib -lpacxf -lpacx -lmpi #(wrenpacx)
#FFLAGS= -64 -O3 -mips4 -r12000 -LNO:cs1=32k:cs2=8M -I/share/apps/unsupported/pacx/standard/include -L/share/apps/unsupported/pacx/standard/lib #(wren)
#LD_MPI= -L/share/apps/unsupported/pacx/standard/lib -lpacxf -lpacx -lmpi #(wren)
##FC=/c/brandenb/pacx/bin/pacxfc #(tacsg2)
#FFLAGS=-64 -O3 -mips4 #(tacsg2)
#OPTFLAGS= -64
#F77=$(FC)
#CFLAGS=-O3 -64 -DFUNDERSC=1

## OSF1:
## Compaq/HP alpha
#FC=f95 #(Mhd.)
#FC=f90 #(Mhd.)
#OPTFLAGS=-fast -O5
#OPTFLAGS=-fast -O5 -notransform_loops #(Mhd.)
#FFLAGS=$(OPTFLAGS) -tune ev6 -arch ev6 #(Mhd.)
#FFLAGS=$(OPTFLAGS) -warn argument_checking -warn declarations -warn unused
#F77=$(FC)
#LIBSIG=-lsig
#LIBSIG= #(gauss)

## Linux:
##
## OS Defaults
##
#FC=g95 -fno-second-underscore
#F77=$(FC)
#FFLAGS=-O3
#F90FLAGS=
#LD_MPI=
#CFLAGS=-O3 -DFUNDERSC=1 -Wall
#CFLAGS_FFTW3=
#FFLAGS_FFTW3=
#LD_FFTW3=
#CFLAGS_FFTW2=
#FFLAGS_FFTW2=
#LD_FFTW2=
##
## Settings for individual machines
##
#FC=mpif90 #(Samos|fire)
#LD_MPI=-lfmpich -lmpich -lmpe -lpmpich -llmpe #(nw43)
#FC=/usr/lib/lam/bin/mpif95 #(Owen|Master)
#FC=g95 #(Cincinnatus|cosmo)
#F77=$(FC) #(Cincinnatus|cosmo)
#FFLAGS=-O4 -fno-second-underscore -I/usr/lib/mpich/include #(Cincinnatus)
#FFLAGS=-O4 -freal=nan -finteger=-2147483648 -fbounds-check -ftrace=full -Wall -Wno=140,141,109,112,137 -I/usr/lib/mpich/include #(cosmo)
#FFLAGS=-O4 -I/usr/include/mpi #(nl4)
#CFLAGS=-O3 -DFUNDERSC=1 #(Cincinnatus)
#CFLAGS=-O3 -DFUNDERSC=2 #(cosmo)
#LD_MPI=-L/usr/lib/mpich/lib -lmpich #(Cincinnatus|cosmo)
##FC=/home/brandenb/pacx/bin/pacxfc #PACX #(fe[0-3])
##FC=mpif77 #(fe[0-3])
#FC=mpif77 -pthread #(obelix)
#FC=/home/ajohan/bin/ifc_7.1 #(ns0)
#FC=pgf90 #(lfc101)
#FFLAGS=-I /usr/local/Packages/mpich-1.2.6/ch-p4/include #(lfc101)
#LD_MPI=-L /usr/local/Packages/mpich-1.2.6/ch-p4/lib/ -lmpich #(lfc101)
#LDONLYFLAGS=farg.o #(lfc101)
#FC=ifort #(nw[0-9]+|hamlet|lynx|brahe|nq[0-9]*|aida[0-9]*)
#FFLAGS=-O3 -I/home/johansen/mpich/include -static-libcxa #(aida[0-9]*)
#LD_MPI=-L /home/johansen/mpich/lib -lmpich #(aida[0-9]*)
#FC=ifort #(swift)
#FFLAGS=-O3 -I/usr/local/mpich/include #(swift)
#LD_MPI=-L /usr/local/mpich/lib -lmpich #(swift)
#FFLAGS=-O3 -I/home/ajohan/mpich/include #(hamlet)
#LD_MPI=-L /home/ajohan/mpich/lib -lmpich #(hamlet)
#FC=ifort #(opto[1-4])
#FFLAGS=-O3 -I/home/johansen/mpich/include/ #(opto[1-4])
#LD_MPI=-Wl,-m elf_i386 -L/home/johansen/mpich/lib/ -lmpich #(opto[1-4])
#FC=/afs/ipp/amd64_sles9/soft/mvapich/mvapich2-0.9.5/f95i.9.1/bin/mpif90 #(rio*|pia*)
#FC=ifort #(eh[1-4])
#FFLAGS=-O3 -I/opt/lam-7.1.2b24-ifort/include/ #(eh[1-4])
#LD_MPI=-lltdl -L/opt/lam-7.1.2b24-ifort/lib -llamf77mpi -llammpio -lmpi -llam -lpthread #(eh[1-4])
#FC=g95 -O3 -fno-second-underscore #(moria|balrog|sky*|regulus)
#FFLAGS= #(moria|balrog|sky*|regulus)
#LD_MPI= #(moria|balrog|sky*|regulus)
#FC=ifc_6.0 -I/usr/local/lib/LAM/include #(fe[0-9])
#FC=/usr/local/bin/ifc -I/usr/local/lib/LAM/include #(fe[0-9])
#FC=/people/disk2/brandenb/bin/ifort -I/usr/local/lib/LAM/include #(fe[0-9])
#FC=~dobler/opt/intel/compiler70/ia32/bin/ifc -I/usr/local/lib/LAM/include #(fe[0-9])
##FC=ifort -I/usr/local/lib/LAM/include #(fe[0-9])
#FC=fort -I/usr/lib/lam/include #(mhd|metropolis)
#FC=mpif90 #(Nunatak[0-9])
##FC=/home/brandenb/pacx/bin/pacxfc #(ns0)
#FC=ifc #(nl19)
#FC=ifort -I/usr/include/lam -L/usr/lib/lam/lib #(nl19)
#FC=/opt/intel/compiler60/ia32/bin/ifc -I/usr/lib/lam/include #(taspd209a)
#FFLAGS=-O3 -Wl,-rpath,/opt/intel/compiler60/ia32/lib #(taspd209a)
#LD_MPI=-I/usr/lib/lam/include -L/usr/lib/lam/lib -llammpio -llamf77mpi -lmpi -llam -lnsl -lutil #(taspd209a)
#LIBMPISUFFIX=_#(taspd209a)
#FC=/usr/local/ifort/bin/mpif90 #(frontend)
#FFLAGS=-O3 #(frontend)
#CFLAGS=-O3 -DFUNDERSC=1 #(frontend) 
#FFLAGS=-O3 -L/home/dobler/lib -lc-2.2.93 #(nw46)
#FFLAGS=-O3 -static-libcxa #(ns0|char)
#FFLAGS=-O3 -xW -vec_report0 #(obelix)
#FC=pgf90 #(tycho|linux29|monolith)
#FC=ifort #(vmware|erland|bohm|igor|onsager|char)
#FC=ifort  #(co-login)
#LD_MPI=-lmpi  #(co-login)
##FC=pgf90 #(erland|bohm|igor|onsager)
#FC=efc #(user0[1-9])
#FC=efc #(srif-sb12-hpc-prod)
#FCCLEANER=2>&1 | scripts/cleanf95 #(srif-sb12-hpc-prod)
#FFLAGS= #(srif-sb12-hpc-prod)
#FFLAGS=-align -ipo -O2 #(srif-sb12-hpc-prod)
#LD_MPI=-lmpi #(srif-sb12-hpc-prod)
#FC=lf95 #(pcponty)
#FFLAGS=-O # (Samos)
#FFLAGS= -fast -lm # (fire)
#FFLAGS= -fast -O5 -notransform_loops -tune ev6 -arch ev6 #(mhd)
#FFLAGS= -fast -O5 -notransform_loops -tune ev67 -arch ev67 #(metropolis)
##AB: next line uncommented on Tobi's advice
#LD_MPI=-static -L/usr/local/lib/LAM/lib -llamf77mpi -lmpi -llam -lnsl -lutil -pthread #(fe[0-4])
#LD_MPI=-static -L/opt/lam/lib -lmpi -llamf77mpi -llam #(nw50)
#LD_MPI=-L/home/ajohan/f90/lib -llamf77mpi -lmpi -llam #(ns0|nq[0-9]*|nw[0-9]+)
#LD_MPI=-Wl,-m elf_i386 -L/home/ajohan/f90/lib -llamf77mpi -lmpi -llam #(lynx)
#LD_MPI=-lmpi #(brahe)
##FFLAGS=-O3 -ipo #PACX #(fe[0-3])
#FFLAGS=-fast -lm #(tycho|linux29)
##FFLAGS= #(vmware|erland|bohm|igor|onsager)
#FFLAGS= -fast -lm#(erland|bohm|igor|onsager)
#FFLAGS= -fast -lm -Nscampi   #(monolith)
#FFLAGS= #(fe[0-4])  ##(compiles faster/axel)
#FFLAGS=-O4 -C -gline -Wc,-malign-double #(Mephisto|Aladdin)
#FFLAGS=-O4 #(nl3)
#FFLAGS=-i_dynamic -O3 #(nw[0-9]+|nl11|sandin|lynx)
#FFLAGS=-O3  #(nw[0-9]+|nl11|sandin|lynx)
#FCCLEANER=2>&1 | scripts/cleanf95 #(obelix)
#FFLAGS= #(davey[12])
#FC=ifc -i_dynamic -I/usr/lib/lam/include #(nw17|nl11)
#FC=ifc -I/usr/lib/lam/include #(nw17|nl11)
#FC=ifc -w95 #(sandin)
#FC=f95 -dusty #(davey[12])
#FC=ifc -I/usr/lib/lam/include -i_dynamic #(sandin|nl11)
#CC=mpicc #(obelix)
#FC=ifort -stand f90 #(Kolmogorov|shal|efigi)
#FFLAGS=-O3 #(Kolmogorov|shal|efigi)
##CC=gcc #(Kolmogorov|shal|efigi)
##CFLAGS=-O3 -DFUNDERSC=1 #(Kolmogorov|shal|efigi)
#CFLAGS=-O3 -DFUNDERSC=2 #(Kepler)
#LD_MPI=-I/usr/include -pthread -llammpio -llamf77mpi -lmpi -llam -lutil #(Kolmogorov|shal|efigi)
#LD_MPI=-I/usr/include -pthread -L/usr/lib64 -llammpio -llamf77mpi -lmpi -llam -laio -laio -lutil #(Kepler)
#FC=g95 -fsecond-underscore #(Kolmogorov|Kepler)
#LIBMPISUFFIX=_#(Kolmogorov|shal|efigi)
#FC=g95 -fsecond-underscore #(Pencil)
#FFLAGS=-I/usr/include/lam -pthread -O3 #(Pencil)
#CFLAGS=-O3 -DFUNDERSC=2 #(Pencil)
#LD_MPI=-L/usr/lib/lam/lib -llammpio -llamf77mpi -lmpi -llam -lutil -ldl #(Pencil)
#LD_MPI=-L/usr/lib/lam/lib -llammpio -lpmpi -llamf77mpi -lmpi -llam -lnsl -lutil #(nw17|nl11)
#LD_MPI=-L/opt/mpich/lib #(nw43)
#LD_MPI=-L/usr/local/mpich/lib #(pcponty)
#LD_MPI= # (Samos|fire|sandin)
#LD_MPI=-L/usr/lib/lam/lib -llam -lmpi -llamf77mpi -llammpi++ -llammpio -lnsl -lutil #(mhd|metropolis)
#CFLAGS=-O3 -DFUNDERSC=1 -Wall -m32 #(lynx|opto[1-4])
#CFLAGS=-DFUNDERSC=1 #(obelix)
#CFLAGS=-O3 -DFUNDERSC=2 -Wall #(mhd|metropolis)
#F77=$(FC) -dusty #(nl3|Mephisto|Aladdin)
#F77=$(FC) -lm  #(tycho|monolith)
#F77=$(FC) #(vmware|erland|bohm|igor|onsager)
#F77=$(FC) #(Owen|Master|nw17|nl11)
#F77FLAGS=-w90 #(nw[0-9]+|ns0|nw17|nl11|sandin)
#FC=ifort #(lws.Stanford.EDU|lws2.Stanford.EDU)
#F77=$(FC) #(lws.Stanford.EDU|lws2.Stanford.EDU)
#FFLAGS=-O3 -ipo #(lws.Stanford.EDU|lws2.Stanford.EDU)
#LD_MPI=-lmpi #(lws.Stanford.EDU|lws2.Stanford.EDU)
#CC=icc #(lws.Stanford.EDU|lws2.Stanford.EDU)
#CFLAGS=-O3 -ipo -DFUNDERSC=1 #(lws.Stanford.EDU|lws2.Stanford.EDU)
#FC=ifort #(damtp)
#FFLAGS=  #(damtp)
#CFLAGS=-O3  -DFUNDERSC=1 #(damtp)
#LD_MPI=-I/usr/include -pthread  -llamf77mpi -lmpi -llam -lutil #(damtp)
##
## Axel on Lucidor, h05n35 (ifc 8.1)
##
#FC=mpif90 #(h05n35.*)
#FFLAGS=-O3 #(h05n35.*)
#CC=mpicc #(h05n35.*)
#CFLAGS=-O3 -DFUNDERSC=1 #(h05n35.*)
#LD_MPI= #(h05n35.*)
##
## Axel on Lenngren, d14n36 (ifc 9.1)
## module add i-compilers/latest scampi
## /pdc/vol/i-fce/9.1.039/bin/ifort
##
#FC=ifort #(d14n36.*)
#FFLAGS=-pthread -I/opt/scali/include -no-cpprt #(d14n36.*)
#CC=gcc #(d14n36.*)
#CFLAGS=-DFUNDERSC=1 #(d14n36.*)
#LD_MPI=-pthread -L/opt/scali/lib64 -lfmpi -lmpi #(d14n36.*)
##
## Axel on Horseshoe (ifc 9.0)
##
#FC=~brandenb/apps/intel/fc/9.0/bin/ifort #(fe[0-9])
#FFLAGS=-I/usr/local/lib/LAM/include -O3 -assume 2underscores #(fe[0-4])
#CC=~brandenb/apps/intel/cc/9.0/bin/icc #(fe[0-9])
#CFLAGS=-O3 -DFUNDERSC=2 #(fe[0-4])
#LD_MPI=-pthread -L/usr/local/lib/LAM/lib -llammpio -llamf77mpi -lmpi -llam -lutil #(fe[0-4])
##
## Axel on Horseshoe (ifc 7.1)
##
#FC=~dobler/opt/intel/compiler70/ia32/bin/ifc #(fe[0-9])
#FFLAGS=-I/usr/local/lib/LAM/include -O3 #(fe[0-4])
#CC=icc #(fe[0-9])
#CFLAGS=-O3 -DFUNDERSC=1 #(fe[0-9])
#LD_MPI=-static -L/usr/local/lib/LAM/lib -llamf77mpi -lmpi -llam -lnsl -lutil -pthread #(fe[0-4])
#LIBMPISUFFIX=_#(fe[0-4])
##
## Axel's laptop (nl6, 2.0 GHz)
##
#FC=g95 -fsecond-underscore#(nl6)
#FFLAGS=-O4 #(nl6)
#LD_MPI=#(nl6)
#CFLAGS=-DFUNDERSC=2 #(nl6)
##
#FC=ifort #(nl6)
#FFLAGS=-O3 -I/usr/include/lam #(nl6)
#LD_MPI=-I/usr/include/lam -L/usr/lib/lam/lib -llammpio -llamf77mpi -lmpi -llam -lutil #(nl6)
#LIBMPISUFFIX=_#(nl6)
#CFLAGS=-O3 -DFUNDERSC=1 -Wall #(nl6)
#F77FLAGS=-w90 #(nl6)
##
## Natalia's laptop (Natalia, 1.8 GHz)
##
#FC=ifort #(nbabkovs)
##
## renton & morvern (ngrs's desktop & laptop)
##
#FC=ifort #(renton|morvern)
#FFLAGS=-O3 -I/usr/lib/lam/include #(renton|morvern)
#LD_MPI=-L/usr/lib/lam/lib -llammpio -llamf77mpi -lmpi -llam -lutil #(renton|morvern)
#F77FLAGS=-w90 #(renton|morvern)
#LIBMPISUFFIX=_#(renton|morvern)
##
## barilko Apichat Neamvonk's desktop
##
#FC=ifort #(barilko)
#FFLAGS=-O3 -I/usr/local/lib/idl/lam/include #(barilko)
#LD_MPI=-I/usr/local/lib/idl/lam/include -L/usr/local/lib/idl/lam/lib -llammpio -llamf77mpi -lmpi -llam -lutil #(barilko)
#F77FLAGS=-w90 #(barilko)
##
## wormhole Tony's Laptop
##
#MAKEOPTS=-j 3 #(wormhole)
#FFLAGS=-CA -CV -CS -CB -tpp7 -vec_report0 #(wormhole)
#FFLAGS=-O2 -align -tpp7 -vec_report0 #(wormhole)
#FFLAGS=-O2 -mp -vec_report0 #(wormhole)
#FFLAGS=-O3 -ipo0  #(wormhole)
#FCCLEANER=2>&1 | scripts/cleanf95 #(wormhole)
#FC=ifc -i_dynamic -I/usr/lib/lam/include #(wormhole)
#FC=ifort #(wormhole)
##FC=gfortran-4.1.1 -I/usr/include #(wormhole)
#LD_MPI= #(wormhole)
#LIBMPISUFFIX=_#(wormhole)
##LD_MPI=-llammpio -lmpi -llamf77mpi -lmpi -llam -lnsl -lutil -lpthread #(wormhole)
##LD_MPI=-I/usr/include -pthread -llammpio -llamf77mpi -lmpi -llam -lutil -ldl #(wormhole)
#LD_MPI=-I/usr/include -pthread -llammpio -llamf77mpi -lmpi -llam -lutil -ldl #(wormhole)
#F77=$(FC) #(wormhole)
#F77FLAGS=-w90 #(wormhole)
##
## starlink Newcastle's general access machine
##
#FC=ifort -static -I/usr/local/lib/idl/lam/include #(starlink)
#LD_MPI=-L/usr/local/lib/idl/lam/lib -llammpio -lmpi -llamf77mpi -lmpi -llam -lnsl -lutil -lpthread #(starlink)
#LIBMPISUFFIX=_#(starlink)
#MAKEOPTS=-j 3 #(starlink)
#
## Hades -- Wlad's laptop
##
#FC=ifort #(hades)
#MPI_HOME=/home/wlyra/test/lib #(hades)
#MPI_LDLIBS= -llammpio -llamf77mpi -lmpi -llam -lutil -ldl #(hades)
#FFLAGS=-I/usr/include/mpi -O3 #(hades)
#LIBMPISUFFIX=_#(hades)
#LD_MPI=-L$(MPI_HOME) -pthread $(MPI_LDLIBS) #(hades)
##
## Andrew's Laptop (wkfg)
##
#FC=mpif90 #(wkfg)
#FFLAGS=-O2 -frecord-marker=4 -mtune=athlon-4 #(wkfg)
#FFLAGS_DOUBLE= -fdefault-real-8 #(wkfg)
##
## clx IBM Linux Cluster, Bologna IT
##
#LD_MPI=    #(node[0-9]+)
#FC=mpif90 # (node[0-9]+)
#CC=mpicc  # (node[0-9]+)
#FFLAGS=-fast -Mvect=sse -Mipa -Minline  # (node[0-9]+)
#FFLAGS=-fast -tp p7 -fastsse -Mvect=sse -O2 # (node[0-9]+)
##
## giga[0-9] Newcastle eScience (tony,dave,greame)
##
#MAKEOPTS=-j 3 #(giga[0-9]*)
#FC=mpif90 -static #(giga[0-9]*)
##FC=gfortran_4win -static -I/addon/shared/lam/include #(giga01)
##CC=gcc_4win -static -I/addon/shared/lam/include #(giga01)
#FCCLEANER=2>&1 | scripts/cleanf95 #(giga[0-9]*)
#FCCLEANER=  #(giga01)
#FFLAGS=-O0 -CA -CB -CS -CV #(giga[0-9]*)
#FFLAGS=-O2 -ipo -tpp7 -vec_report0 #(giga[0-9]*)
#FFLAGS=-C -tpp7 -vec_report0  #(giga[0-9]*)
#FFLAGS=-O2 -mp -vec_report0 #(giga[0-9]*)
#LD_MPI= #(giga[0-9]*)
##
## St. Andrews Copson Cluster (tony,dave,greame)
## copson.st-and.ac.uk
##
#FC=mpif90 # (copson)
#FFLAGS=-gm -fast -Mvect=sse -Mipa -Minline # (copson)
#FFLAGS=-gm -fast -tp p7 -fastsse -Mvect=sse -O2 -Minline # (copson)
#FFLAGS=-gm -fast -tp p7 -fastsse -Mvect=sse -O2 # (copson)
#LD_MPI= # (copson)
##
#FC=ifc #(gwdu102)
#FFLAGS=-O3 -I/opt/scali/include #(gwdu102)
#LD_MPI=-L/opt/scali/lib -lmpi -lfmpi #(gwdu102)
##
## Uppsala cluster (wlad)
## www.uppmax.uu.se
#FC=mpif90 #(ra[1-99]*)
#F90=$(FC) #(ra[1-99]*)
#F95=$(FC) #(ra[1-99]*)
#CC=mpicc  #(ra[1-99]*)
##
## draco in oulu
## (for some reason this machine interpretes also ra[],
## so we have to keep this entry just blow that one.)
##
#FC=ifort #(draco.oulu.fi)
#CC=gcc #(draco.oulu.fi)
##
## CSC cluster - (Espoo, Finland)
## www.csc.fi
#FC=mpif90 #(sepeli)
#F90=$(FC) #(sepeli)
#CC=mpicc #(sepeli)
#FFLAGS=-O2 #(sepeli)
#CFLAGS=-DFUNDERSC=1 -O3 #(sepeli)
#LD_MPI= #(sepeli)
##
##
## DCSC cluster - (Copenhagen, not Odense!)
## www.dcsc.ku.dk
#FC=pgf90 #(fend0[1-3])
#CC=pgcc #(fend0[1-3])
#FFLAGS=-fastsse -tp k8-64e -I/usr/local/topspin/mpi/mpich/include #(fend0[1-3])
#CFLAGS=-fastsse -tp k8-64e -DFUNDERSC=1 #(fend0[1-3])
#LD_MPI=-L/usr/local/topspin/mpi/mpich/lib64 -lmpich -lpthread -lmpich_p #(fend0[1-3])
##
## Altix clusters at DCSC (brahe) and Columbia (cfe2)
#FC=ifort #(brahe|cfe2)
#CC=icc #(brahe|cfe2)
#FFLAGS=-O3 #(brahe|cfe2)
#CFLAGS=-O3 -DFUNDERSC=1 #(brahe|cfe2)
#LD_MPI=-lmpi #(brahe|cfe2)
##
## Toulouse's Opteron cluster (116 procs)
##
#FC=ifort #(cict*)
#FFLAGS=-O3 -I/usr/local/mpilam/include #(cict*)
#LD_MPI= -L/usr/local/mpilam/lib -llamf77mpi -lmpi -llam -lnsl -lutil -pthread -ldl #(cict*)
#LIBMPISUFFIX=_#(cict*)

## Darwin:
## Power Macintosh
#FC=g95
#F77=$(FC)
#FFLAGS=-O3
#CFLAGS=-DFUNDERSC=2
#LD_MPI=
#FC=xlf90 #(Nils)
#F77=xlf  #(Nils)
#FFLAGS= -w -qsuppress=1501-510  #(Nils)
#F90FLAGS=-qsuffix=f=f90 #(Nils)
#CFLAGS=-O3 -DFUNDERSC=0 #(Nils)
#LD_MPI=-lSystemStubs #(easymac)
##
## Tarek's laptop (PowerBook G4)
##
#FC=gfortran #(dendara|lapc|tay21)
#FC=g95 -fno-second-underscore #(dendara|lapc|tay21)
##FFLAGS=  -ftrace=full   #(dendara|lapc|tay21)
#CC= gcc-3.3 -03 #(dendara|lapc|tay21)
#FFLAGS= -O2 #(dendara|lapc|tay21)
##LD_MPI= -L${HOME}/opt/lib  #(dendara|lapc|tay21)
##
## Petri's laptop (MacBook Pro)
##
#FC=ifort #(Chandrasekhar|dhcp*)
#FFLAGS= -I/usr/local/include -O3 -stand f90 -assume no2underscores -vec-report0 #(Chandrasekhar|dhcp*)
#CFLAGS=-DFUNDERSC=1 #(Chandrasekhar|dhcp*)
#LD_MPI= -L/usr/local/include -llammpio -llamf77mpi -lmpi -llam -ldl #(Chandrasekhar|dhcp*)


## SunOS:
## Solaris
#CC=mpcc #(corona[1-2])
#FC=f90
#FC=pghpf #(Lomond)
#FC=mpf90 #(corona[1-2])
#FFLAGS=-O4
#FFLAGS=-O3 -dalign -xarch=v9b  #(corona[1-2])
#FFLAGS= -Msmp -O4  #(Lomond)
#CFLAGS=-O4 -DFUNDERSC=1
#CFLAGS=-O4 -DFUNDERSC=0 #(ursa)
#CFLAGS=-O3 -dalign -xarch=v9b -DFUNDERSC=1 #(corona[1-2])
#LD_MPI=-L/opt/local/mpich/lib -lmpich -lsocket -lnsl -laio
#LD_MPI=-lmpi  #(corona[1-2])
#LD_MPI= #(scrooge.)
#F77=$(FC)

## UNICOS/mk:
## Cray T3E
#FC=f90
#FFLAGS=-O3 -em

## HI-UX/MPP:
## Hitachi
#FC=mpif90
#F77=$(FC)
#FFLAGS=-lowercase -I/usr/mpi/include -O4 -pvec -parallel=0
#FFLAGS=-lowercase -Os -noparallel -O4
#CFLAGS=-O4 -DFUNDERSC=0
#LD_MPI=-L/usr/mpi/lib/lib32 -lfmpi -lmpi

## SUPER-UX:
## NEC
#FC=f90 -I/usr/include
#F77=$(FC)
#FFLAGS=-C hopt

## AIX:
## IBM
#CFLAGS=-O3 -DFUNDERSC=0
#F77=xlf
#FC=xlf90
#FFLAGS=-I/usr/lpp/ppe.poe/include -I/usr/lpp/ppe.poe/include/thread -O5 -w
#F90FLAGS=-qsuffix=f=f90
#LD_MPI=-F:mpxlf90
#FC=mpxlf90 #(sp[0-1]*)
#F77=mpxlf #(sp[0-1]*)
#CC=mpcc #(sp[0-1]*)
#CFLAGS=-qarch=pwr4 -qtune=pwr4 -q64 #(sp[0-1]*)
#FFLAGS=-qarch=pwr4 -qtune=pwr4 -q64 #(sp[0-1]*)
#CFLAGS=-O5 -qarch=pwr4 -qtune=pwr4 -q64 #(sp[0-1]*)
#FFLAGS=-O5 -qarch=pwr4 -qtune=pwr4 -q64 #(sp[0-1]*)
#LD_MPI= #(sp[0-1]*)
#FC=mpxlf90_r #(p690*)
#CC=mpcc_r #(p690*)
#FFLAGS=-O2 -qarch=pwr4 -qtune=pwr4 #(p690*)
#CFLAGS=-qarch=pwr4 -qtune=pwr4 -DFUNDERSC=0 #(p690*)
#LD_MPI= #(p690*)
### -bmaxdata:0x7000000


### End machine dependent

LD=$(FC)
LDFLAGS=$(FFLAGS) $(FFLAGS_GENERAL) $(LDONLYFLAGS)
MPICOMM_FIX=$(MPICOMM)$(LIBMPISUFFIX)

## Compile files with the proper FFT libraries.
# If condition not really needed for source libraries but will be needed
# for external libraries
#
ifeq ($(FOURIER),fourier_fft)
  CFLAGS_FOURIER=
  FFLAGS_FOURIER=
  LD_FOURIER=fft.o
endif
ifeq ($(FOURIER),fourier_fftpack)
  CFLAGS_FOURIER=
  FFLAGS_FOURIER=
  LD_FOURIER=fftpack.o
endif
#ifeq ($(FOURIER),fourier_fftw2)
#  CFLAGS_FOURIER=$(CFLAGS_FFTW2)
#  FFLAGS_FOURIER=$(FFLAGS_FFTW2)
#  LD_FOURIER=$(LD_FFTW2)
#endif
#ifeq ($(FOURIER),fourier_fftw3)
#  CFLAGS_FOURIER=$(CFLAGS_FFTW3)
#  FFLAGS_FOURIER=$(FFLAGS_FFTW3)
#  LD_FOURIER=$(LD_FFTW3)
#endif



## Generic rules:
.SUFFIXES:			# get rid of that annoying Modula rule
.SUFFIXES: .f .f90 .c $(PC_META_TYPE).o .inc .h .dot .ps .svg

.f$(PC_META_TYPE).o:
	$(F77) $(FFLAGS) $(FFLAGS_GENERAL) $(FFLAGS_FOURIER) $(F77FLAGS)  -o $*$(PC_META_TYPE).o -c $*.f
.f90$(PC_META_TYPE).o:
	$(FC) $(FFLAGS) $(FFLAGS_GENERAL) $(FFLAGS_FOURIER) $(F90FLAGS) -o $*$(PC_META_TYPE).o -c $*.f90
.c$(PC_META_TYPE).o:
	$(CC) $(CFLAGS) $(CFLAGS_GENERAL) $(CFLAGS_FOURIER) -o $*$(PC_META_TYPE).o -c $*.c
#
# Rules for creating images of dot dependency diagrams
#
.dot.ps:
	cat $*.dot | dot -Tps -o $*.ps
.dot.svg:
	cat $*.dot | dot -Tsvg -o $*.svg

#
# ---------------------------------------------------------------------- #
## Abbreviations
technical=cparam$(PC_META_TYPE).o cdata$(PC_META_TYPE).o particles_cdata$(PC_META_TYPE).o messages$(PC_META_TYPE).o general$(PC_META_TYPE).o farray$(PC_META_TYPE).o shared_variables$(PC_META_TYPE).o $(FOURIER)$(PC_META_TYPE).o slices$(PC_META_TYPE).o deriv$(PC_META_TYPE).o boundcond$(PC_META_TYPE).o filter$(PC_META_TYPE).o $(INITCOND_SPEC)$(PC_META_TYPE).o initcond$(PC_META_TYPE).o register$(PC_META_TYPE).o prints$(PC_META_TYPE).o $(TIMEAVG)$(PC_META_TYPE).o persist$(PC_META_TYPE).o $(GRID)$(PC_META_TYPE).o
#
physics=$(GLOBAL)$(PC_META_TYPE).o $(VISCOSITY)$(PC_META_TYPE).o $(SHOCK)$(PC_META_TYPE).o $(HYDRO)$(PC_META_TYPE).o $(DENSITY)$(PC_META_TYPE).o $(FORCING)$(PC_META_TYPE).o $(GRAVITY)$(PC_META_TYPE).o $(POISSON)$(PC_META_TYPE).o $(SELFGRAVITY)$(PC_META_TYPE).o $(INTERSTELLAR)$(PC_META_TYPE).o $(ENTROPY)$(PC_META_TYPE).o $(EOS)$(PC_META_TYPE).o $(MAGNETIC)$(PC_META_TYPE).o $(SHEAR)$(PC_META_TYPE).o $(PSCALAR)$(PC_META_TYPE).o $(CHIRAL)$(PC_META_TYPE).o $(RADIATION)$(PC_META_TYPE).o $(DUSTVELOCITY)$(PC_META_TYPE).o $(DUSTDENSITY)$(PC_META_TYPE).o $(SPECIAL)$(PC_META_TYPE).o $(COSMICRAY)$(PC_META_TYPE).o $(COSMICRAYFLUX)$(PC_META_TYPE).o $(TESTFIELD)$(PC_META_TYPE).o $(PARTICLES)$(PC_META_TYPE).o $(PARTICLES_RADIUS)$(PC_META_TYPE).o $(PARTICLES_NUMBER)$(PC_META_TYPE).o $(PLANET)$(PC_META_TYPE).o $(PARTICLES_SELFGRAVITY)$(PC_META_TYPE).o $(PARTICLES_NBODY)$(PC_META_TYPE).o
#
switchable=$(physics) $(BORDER_PROF)$(PC_META_TYPE).o
#
comm_deps=$(technical) sub$(PC_META_TYPE).o $(IO)$(PC_META_TYPE).o snapshot$(PC_META_TYPE).o param_io$(PC_META_TYPE).o  $(MPICOMM_FIX)$(PC_META_TYPE).o ghostfold_$(MPICOMM)$(PC_META_TYPE).o $(switchable) $(POWER)$(PC_META_TYPE).o $(STRUCT_FUNC)$(PC_META_TYPE).o $(PARTICLES_MAIN)$(PC_META_TYPE).o $(PARTICLES_SUB)$(PC_META_TYPE).o
#
start_deps_f90=$(comm_deps)
#
start_deps=$(start_deps_f90) $(DEBUG)$(PC_META_TYPE).o
#
run_deps_f90=$(comm_deps) equ$(PC_META_TYPE).o $(TIMESTEP)$(PC_META_TYPE).o
#
run_deps=$(run_deps_f90) $(DEBUG)$(PC_META_TYPE).o
#
shock_finder_deps=cparam$(PC_META_TYPE).o
#
start_fast_deps=cparam.f90 cdata.f90 general.f90 $(MPICOMM_FIX).f90 ghostfold_$(MPICOMM).f90 deriv.f90 sub.f90 $(PARTICLES_SUB).f90 $(INITCOND_SPEC).f90 $(DEBUG)$(PC_META_TYPE).o $(IO).f90 $(GLOBAL).f90 $(POISSON)$(PC_META_TYPE).o $(GRAVITY).f90 $(SELFGRAVITY)$(PC_META_TYPE).o $(EOS).f90 slices.f90 initcond.f90 $(SPECIAL).f90 $(DENSITY).f90 $(VISCOSITY).f90 $(SHOCK).f90 $(MAGNETIC).f90 $(COSMICRAY).f90 $(COSMICRAYFLUX).f90 $(HYDRO).f90 $(INTERSTELLAR).f90 $(ENTROPY).f90 $(RADIATION).f90 boundcond.f90 filter.f90 $(FORCING).f90 $(SHEAR).f90 $(PSCALAR).f90 $(CHIRAL).f90 $(DUSTVELOCITY).f90 $(DUSTDENSITY).f90 $(PARTICLES)$(PC_META_TYPE).o $(TIMEAVG).f90 param_io.f90 prints.f90 register.f90 $(POWER).f90 $(STRUCT_FUNC).f90 snapshot.f90 $(GRID).f90 $(PLANET).f90 start.f90
#
run_fast_deps=cparam.f90 cdata.f90 general.f90 $(MPICOMM_FIX).f90 ghostfold_$(MPICOMM).f90 deriv.f90 sub.f90 $(PARTICLES_SUB).f90 $(INITCOND_SPEC).f90 $(DEBUG)$(PC_META_TYPE).o $(IO).f90 $(GLOBAL).f90 $(POISSON)$(PC_META_TYPE).o $(GRAVITY).f90 $(SELFGRAVITY)$(PC_META_TYPE).o $(EOS).f90 slices.f90 initcond.f90 $(SPECIAL).f90 $(DENSITY).f90 $(VISCOSITY).f90 $(SHOCK).f90 $(MAGNETIC).f90 $(COSMICRAY).f90 $(COSMICRAYFLUX).f90 $(HYDRO).f90 $(INTERSTELLAR).f90 $(ENTROPY).f90 $(RADIATION).f90 boundcond.f90 filter.f90 $(FORCING).f90 $(SHEAR).f90 $(PSCALAR).f90 $(CHIRAL).f90 $(DUSTVELOCITY).f90 $(DUSTDENSITY).f90 $(PARTICLES).f90 equ.f90 $(TIMESTEP).f90 $(TIMEAVG).f90 param_io.f90 prints.f90 register.f90 $(POWER).f90 $(STRUCT_FUNC).f90 snapshot.f90 $(PLANET).f90 run.f90
#
start=start$(PC_META_TYPE).o $(start_deps)
#
run=run$(PC_META_TYPE).o $(run_deps)
#
shock_finder=$(SHOCK_FINDER)$(PC_META_TYPE).o $(shock_finder_deps)
#merge_tony var2ascii_deps=cparam$(PC_META_TYPE).o
#merge_tony var2ascii=var2ascii$(PC_META_TYPE).o $(var2ascii_deps)
read_videofiles_deps=cparam$(PC_META_TYPE).o cdata$(PC_META_TYPE).o general$(PC_META_TYPE).o
read_videofiles=read_videofiles$(PC_META_TYPE).o $(read_videofiles_deps)
read_vectorfiles_deps=cparam$(PC_META_TYPE).o cdata$(PC_META_TYPE).o general$(PC_META_TYPE).o
read_vectorfiles=read_vectorfiles$(PC_META_TYPE).o $(read_vectorfiles_deps)
TAG_SOURCE=$(run_deps_f90:$(PC_META_TYPE).o=.f90) start.f90 run.f90 debug_c.c read_videofiles.f90
PC_XMLEXPORT=$(PENCIL_HOME)/bin/pc_xmlexport

# ---------------------------------------------------------------------- #
## Symbolic targets

default: start_buildtime Makefile Makefile_inc cparam$(PC_META_TYPE).inc code stop_buildtime buildinfo

pacx: pacx-makefile cparam$(PC_META_TYPE).inc code

# Create Makefile.inc, but need this to be a `phony' target (i.e. not a
# filename as target), so this file is always written.
# Don't know whether .PHONY declaration is portable, so we just slightly
# rename the target.
Makefile_inc:
	@printf \
	    "%s\n" \
	    "# src/Makefile.inc                      -*-Makefile-*- (for Emacs)" \
	    "# ----------------" \
	    "" \
	    "# This file was automatically generated at `date` by 'make'." \
	    "# Its main role is to set the precision (single vs. double) of a" \
	    "# run for compilation." \
	    "" > Makefile.inc
	@case "$(REAL_PRECISION)" in \
	default|4) \
	    ;; \
	double|8) \
	    echo "FFLAGS_GENERAL=$(FFLAGS_DOUBLE)" >> Makefile.inc; \
	    echo "CFLAGS_GENERAL=$(CFLAGS_DOUBLE)" >> Makefile.inc; \
	    case "$(MPICOMM)" in \
	    mpicomm) \
	        echo "MPICOMM=mpicomm_double" >> Makefile.inc; \
	        ;; \
	    mpicomm_) \
	        echo "MPICOMM=mpicomm_double_" >> Makefile.inc; \
	        ;; \
	    esac; \
	    ;; \
	*) \
	    echo "What is REAL_PRECISION=$(REAL_PRECISION) supposed to mean?"; \
	    exit 1; \
	    ;; \
	esac

Makefile: Makefile.src
	scripts/check-mkfile Makefile$(PC_META_TYPE).local Makefile.src
	scripts/adapt-mkfile Makefile.src Makefile

pacx-makefile: Makefile.src
	scripts/acx-adapt-mkfile Makefile.src pacx-Makefile
	cp pacx-Makefile Makefile

depend dep:
	rm -f Makefile.depend
	scripts/mkdep start.f90 run.f90 read_videofiles.f90 read_vectorfiles.f90 equ.f90 $(TIMESTEP).f90 debug_c.c $(GRID).f90 $(comm_deps:$(PC_META_TYPE).o=.f90)  > Makefile.depend

# Help us finding out what compiler, MPI library, etc we have and give recommendations
semiauto-conf:
	echo "Running semiauto-conf"
	@scripts/semiauto-conf \
	  FC="$(FC)" \
	  FFLAGS="$(FFLAGS)" \
	  FFLAGS_GENERAL="$(FFLAGS_GENERAL)" \
	  FFLAGS_FOURIER="$(FFLAGS_FOURIER)" \
	  F90FLAGS="$(F90FLAGS)" \
	  CC="$(CC)" \
	  CFLAGS="$(CFLAGS)" \
	  CFLAGS_GENERAL="$(CFLAGS_GENERAL)" \
	  CFLAGS_FOURIER="$(CFLAGS_FOURIER)" \
	  LD="$(LD)" \
	  LD_MPI="$(LD_MPI)" \
	  LD_FLAGS="$(LD_FLAGS)" \
	  LD_FOURIER="$(LD_FOURIER)" \
	  LIBMPISUFFIX="$(LIBMPISUFFIX)"

# Generate files for automated debugging and testing etc.
start_buildtime:
	@echo "<buildtime><timestamp type='start'>`date`</timestamp>" > .buildtime
stop_buildtime:
	@echo "<timestamp type='end'>`date`</timestamp></buildtime>" >> .buildtime
buildinfo:
	@$(PC_XMLEXPORT) buildinfo -e "CC='$(CC)';CFLAGS='$(CFLAGS)';F90='$(F90)';F77='$(F77)';" \
	                       -e "FFLAGS='$(FFLAGS)';F90FLAGS='$(F90FLAGS)';F77FLAGS='$(F77FLAGS)';" \
	                       -e "LD_FOURIER='$(LD_FOURIER)';FFLAGS_FOURIER='$(FFLAGS_FOURIER)';CFLAGS_FOURIER='$(CFLAGS_FOURIER)';" \
	                       -e "FCCLEANER='$(FCCLEANER)';LD_MPI='$(LD_MPI)';LDONLYFLAGS='$(LDONLYFLAGS)';" \
	                       -e "FFLAGS_GENERAL='$(FFLAGS_GENERAL)';CFLAGS_GENERAL='$(CFLAGS_GENERAL)';" \
	                       -e "FC='$(FC)';" \
	                       -e "MPICOMM='$(MPICOMM_FIX)';GLOBAL='$(GLOBAL)';GRID='$(GRID)';IO='$(IO)';" \
	                       -e "POWER='$(POWER)';DEBUG='$(DEBUG)';HYDRO='$(HYDRO)';" \
	                       -e "VISCOSITY='$(VISCOSITY)';DENSITY='$(DENSITY)';ENTROPY='$(ENTROPY)';" \
	                       -e "MAGNETIC='$(MAGNETIC)';RADIATION='$(RADIATION)';PSCALAR='$(PSCALAR)';" \
	                       -e "CHIRAL='$(CHIRAL)';DUSTVELOCITY='$(DUSTVELOCITY)';DUSTDENSITY='$(DUSTDENSITY)';" \
	                       -e "INTERSTELLAR='$(INTERSTELLAR)';COSMICRAY='$(COSMICRAY)';COSMICRAYFLUX='$(COSMICRAYFLUX)';" \
	                       -e "EOS='$(EOS)';STRUCT_FUNC='$(STRUCT_FUNC)';INITCOND_SPEC='$(INITCOND_SPEC)';SHOCK='$(SHOCK)';" \
	                       -e "TESTFIELD='$(TESTFIELD)';GRAVITY='$(GRAVITY)';FORCING='$(FORCING)';SHEAR='$(SHEAR)';" \
	                       -e "TIMEAVG='$(TIMEAVG)';SPECIAL='$(SPECIAL)';PARTICLES='$(PARTICLES)';PARTICLES_SUB='$(PARTICLES_SUB)';" \
	                       -e "PARTICLES_MAIN='$(PARTICLES_MAIN)';PARTICLES_RADIUS='$(PARTICLES_RADIUS)';" \
			       -e "PLANET='$(PLANET)';"\
	                       -e "SHOCK_PROFILE='$(SHOCK_PROFILE)';SHOCK_FINDER='$(SHOCK_FINDER)';" > .buildinfo


# Ignore cparam dependencies upon .f90 files to save a few time consuming
# recompiles! Just check for switching of modules instead.
all.dot: Makefile.src Makefile$(PC_META_TYPE).local scripts/mkdot
	scripts/mkdot -T "All f90 dependencies" *.f90 | grep -v "RVID_BOX" | grep -v "SURFACEDATA" | grep -v "MAIN_PROGRAM" | grep -v "WRITE_DEFAULT_NAMELISTS" > all.dot
all_nocdata.dot: all.dot
	cat all.dot | grep -v "CDATA" | grep -v "CPARAM" > all_nocdata.dot
all_nocdataexe.dot: all.dot
	cat all.dot | grep -v "CDATA" | grep -v "CPARAM" | grep -v "RUN" | grep -v "START"| grep -v "READ_VIDEOFILES" | grep -v "READ_VECTORFILES" > all_nocdataexe.dot
switchable.dot: Makefile.src Makefile$(PC_META_TYPE).local scripts/mkdot
	scripts/mkdot -T "Switchable Module Dependencies" $(switchable:$(PC_META_TYPE).o=.f90) > switchable.dot
run.dot: Makefile.src Makefile$(PC_META_TYPE).local scripts/mkdot 
	scripts/mkdot -T "Run Dependencies" $(run:$(PC_META_TYPE).o=.f90) > run.dot
start.dot: Makefile.src Makefile$(PC_META_TYPE).local scripts/mkdot
	scripts/mkdot -T "Start Dependencies" $(start:$(PC_META_TYPE).o=.f90) > start.dot
run_nocdata.dot: run.dot
	cat run.dot | grep -v "CDATA" | grep -v "CPARAM" > run_nocdata.dot
start_nocdata.dot: start.dot
	cat start.dot | grep -v "CDATA" | grep -v "CPARAM" > start_nocdata.dot
switchable_nocdata.dot: switchable.dot
	cat switchable.dot | grep -v "CDATA" | grep -v "CPARAM" > switchable_nocdata.dot
#
all.ps: all.dot
run.ps: run.dot
start.ps: start.dot
#
switchable.ps: switchable_nocdata.dot
all_nocdata.ps: all_nocdata.dot
run_nocdata.ps: run_nocdata.dot
start_nocdata.ps: start_nocdata.dot
switchable_nocdata.ps: switchable_nocdata.dot
#
all_nocdataexe.ps: all_nocdataexe.dot
#
diagrams: run.ps run_nocdata.ps start.ps start_nocdata.ps switchable.ps switchable_nocdata.ps all.ps all_nocdata.ps all_nocdataexe.ps
#
all.svg: all.dot
run.svg: run.dot
start.svg: start.dot
#
switchable.svg: switchable_nocdata.dot
all_nocdata.svg: all_nocdata.dot
run_nocdata.svg: run_nocdata.dot
start_nocdata.svg: start_nocdata.dot
switchable_nocdata.svg: switchable_nocdata.dot
#
all_nocdataexe.svg: all_nocdataexe.dot
#
diagrams_svg: run.svg run_nocdata.svg start.svg start_nocdata.svg switchable.svg switchable_nocdata.svg all.svg all_nocdata.svg all_nocdataexe.svg
#
#
cparam$(PC_META_TYPE).inc: Makefile.src Makefile$(PC_META_TYPE).local cparam$(PC_META_TYPE).local scripts/mkcparam
	scripts/mkcparam $(switchable:$(PC_META_TYPE).o=.f90) grid.f90 cparam$(PC_META_TYPE).local -M "$(PC_META_TYPE)" -o cparam$(PC_META_TYPE).inc
cparam$(PC_META_TYPE).o:  cparam.f90 cparam$(PC_META_TYPE).local cparam$(PC_META_TYPE).inc
	if [ "$(PC_META_TYPE)" ]; then \
		 rm -f cparam.inc; \
		 rm -f cparam_pencils.inc; \
	     ln -s cparam$(PC_META_TYPE).inc cparam.inc;\
	     ln -s cparam_pencils$(PC_META_TYPE).inc cparam_pencils.inc;\
	fi
	$(FC) $(FFLAGS) $(FFLAGS_GENERAL) $(F90FLAGS) -o cparam$(PC_META_TYPE).o -c cparam.f90

special_dummies.inc:  nospecial.f90 $(SPECIAL).f90
	scripts/mkdummyinc -d nospecial.f90 -s $(SPECIAL).f90 > special_dummies.inc

shock_profile$(PC_META_TYPE).inc: Makefile.src Makefile$(PC_META_TYPE).local $(SHOCK_FINDER)$(PC_META_TYPE).x $(SHOCK_PROFILE).desc
	+if [ -f $(SHOCK_PROFILE)$(PC_META_TYPE).inc ]; then \
          rm -f shock_profile$(PC_META_TYPE).inc; \
          ln -s $(SHOCK_PROFILE).inc shock_profile$(PC_META_TYPE).inc; \
	elif [ -f $(SHOCK_PROFILE).desc ]; then \
          $(MAKE) $(SHOCK_FINDER)$(PC_META_TYPE).x; \
          ./$(SHOCK_FINDER)$(PC_META_TYPE).x < $(SHOCK_PROFILE).desc > shock_profile$(PC_META_TYPE).inc; \
        fi

mpicomm_double.f90: mpicomm.f90
	sed -e 's/REAL/DOUBLE_PRECISION/g' mpicomm.f90 > mpicomm_double.f90
ghostfold_mpicomm_double.f90: ghostfold_mpicomm.f90
	ln -s ghostfold_mpicomm.f90 ghostfold_mpicomm_double.f90
mpicomm_.f90: mpicomm.f90
	perl -pe 's/(MPI_[A-Z1-9_]*)([ (])/$$1_$$2/g' mpicomm.f90 > mpicomm_.f90
mpicomm_double_.f90: mpicomm_double.f90
	perl -pe 's/(MPI_[A-Z1-9_]*)([ (])/$$1_$$2/g' mpicomm_double.f90 > mpicomm_double_.f90
nompicomm_.f90: nompicomm.f90
	cp nompicomm.f90 nompicomm_.f90

EXECUTABLES=start$(PC_META_TYPE).x run$(PC_META_TYPE).x \
	read_videofiles$(PC_META_TYPE).x read_vectorfiles$(PC_META_TYPE).x
        # write_dummy_namelists$(PC_META_TYPE).x
# The last few object files to compile. We need to compile _all_ object
# files before linking, because FC=g95_quick_and_dirty will otherwise
# delete already compiled .x files:
LAST_OBJ=$(EXECUTABLES:.x=.o)
code: Makefile_inc
	@# Realize error even when last command in pipe is FCCLEANER:
	@echo "$(MAKE) $(MAKEOPTS) $(LAST_OBJ) $(EXECUTABLES)"
	@if [ ! -z "$(FCCLEANER)" ]; then \
	    ($(MAKE) $(MAKEOPTS) $(LAST_OBJ) $(EXECUTABLES) \
	    || echo "PENCIL COMPILATION ERROR") $(FCCLEANER) ; \
	else \
	    $(MAKE) $(MAKEOPTS) $(LAST_OBJ) $(EXECUTABLES) ; \
	fi

FASTEXECS=startfast$(PC_META_TYPE).x runfast$(PC_META_TYPE).x read_videofiles$(PC_META_TYPE).x read_vectorfiles$(PC_META_TYPE).x
fast:
	@echo "$(MAKE) $(MAKEOPTS) $(FASTEXECS)"
	@if [ ! -z "$(FCCLEANER)" ]; then \
	    ($(MAKE) $(MAKEOPTS) $(FASTEXECS) \
	    || echo "PENCIL COMPILATION ERROR") $(FCCLEANER) ; \
	else \
	    $(MAKE) $(MAKEOPTS) $(FASTEXECS) ; \
	fi

debug:
	@echo "$(MAKE) $(MAKEOPTS) FFLAGS='$(FFLAGS) $(DEBUGFLAGS)' start$(PC_META_TYPE).x run$(PC_META_TYPE).x"
	@if [ ! -z "$(FCCLEANER)" ]; then \
	    ($(MAKE) $(MAKEOPTS) FFLAGS='$(FFLAGS) $(DEBUGFLAGS)' start$(PC_META_TYPE).x run$(PC_META_TYPE).x \
	    || echo "PENCIL COMPILATION ERROR") $(FCCLEANER) ; \
	else \
	    $(MAKE) $(MAKEOPTS) FFLAGS='$(FFLAGS) $(DEBUGFLAGS)' start$(PC_META_TYPE).x run$(PC_META_TYPE).x; \
	fi


start$(PC_META_TYPE).x: $(start) Makefile$(PC_META_TYPE).local
	$(LD) $(LDFLAGS) $(start) $(LD_MPI) $(LD_FOURIER) -o start$(PC_META_TYPE).x

run$(PC_META_TYPE).x: $(run) Makefile$(PC_META_TYPE).local
	$(LD) $(LDFLAGS) $(run) $(LD_MPI) $(LD_FOURIER) $(LIBSIG) -o run$(PC_META_TYPE).x

runfast$(PC_META_TYPE).x: $(run_fast_deps) Makefile$(PC_META_TYPE).local
	$(FC) -o runfast$(PC_META_TYPE).x $(FFLAGS) $(FFLAGS_GENERAL) $(F90FLAGS) $(run_fast_deps) $(LDFLAGS) $(LD_MPI) $(LD_FOURIER) $(LIBSIG)

startfast$(PC_META_TYPE).x: $(start_fast_deps) Makefile$(PC_META_TYPE).local
	$(FC) -o startfast$(PC_META_TYPE).x $(FFLAGS) $(FFLAGS_GENERAL) $(F90FLAGS) $(start_fast_deps) $(LDFLAGS) $(LD_MPI) $(LD_FOURIER) 

$(SHOCK_FINDER)$(PC_META_TYPE).x: $(shock_finder) Makefile$(PC_META_TYPE).local
	$(LD) $(LDFLAGS) $(shock_finder) $(LD_MPI) $(LD_FOURIER) $(LIBSIG) -o $(SHOCK_FINDER)$(PC_META_TYPE).x

# Handy for debugging; just compile by hand what is changed.
# When you use this you must be certain that everying is consistent.
linkonly:
	$(LD) $(LDFLAGS) $(start) $(LD_MPI) $(LD_FOURIER) -o start$(PC_META_TYPE).x
	$(LD) $(LDFLAGS) $(run) $(LD_MPI) $(LD_FOURIER) $(LIBSIG) -o run$(PC_META_TYPE).x
#shorthand for this
l:
	$(MAKE) $(MAKEOPTS) linkonly

# Needed for the underscore trick:
mpicomm_.f90:      mpicomm.f90

# Use sloppier compiler for MPICOMM and fftpack if specified:
# If set, FFLAGS_SLOPPY overrides '$(FFLAGS) $(F90FLAGS)'. Use like this:
#   FFLAGS_SLOPPY=-O4 -Wall
#   F90FLAGS=$(FFLAGS_SLOPPY) -Werror
#   F77FLAGS=$(FFLAGS_SLOPPY)
# to restrict `-Werror' to F90 files other than MPICOMM.
$(MPICOMM_FIX)$(PC_META_TYPE).o: mpicomm.h $(MPICOMM_FIX).f90 cdata$(PC_META_TYPE).o
	@fflags="$(FFLAGS_SLOPPY)"; \
	if [ -z "$$fflags" ]; then fflags="$(FFLAGS) $(F90FLAGS)"; fi; \
	echo $(FC) $$fflags $(FFLAGS_GENERAL) $(FFLAGS_FOURIER) \
	    -o $(MPICOMM_FIX)$(PC_META_TYPE).o -c $(MPICOMM_FIX).f90; \
	$(FC) $$fflags $(FFLAGS_GENERAL) $(FFLAGS_FOURIER) \
	    -o $(MPICOMM_FIX)$(PC_META_TYPE).o -c $(MPICOMM_FIX).f90
#

# Shortcut for debugging radiation:
rad:
	ifc -c radiation_exp.f90
	$(LD) $(LDFLAGS) $(start) $(LD_MPI) $(LD_FOURIER) -o start$(PC_META_TYPE).x
	$(LD) $(LDFLAGS) $(run) $(LD_MPI) $(LD_FOURIER) $(LIBSIG) -o run$(PC_META_TYPE).x

# Remove all build files, but keep executables
# (misleading name..)
run:
	rm -f *.o *.mod *.d
	rm -f work.pc work.pcl

# Alternative to make run. To copy executables to parent directory.
# Make clean(n) could then be run on the source.
# (misleading name..)
install:
	cp *.x ../

# TAGS file for Emacs.
# $(TAG_SOURCE) requires nofftpack.f90 or fft.f90 to exist, so we
# temporarily create them
nofftpack.f90:
	@ touch nofftpack.f90
fft.f90:
	@ touch fft.f90
TAGS: $(TAG_SOURCE)
	etags $(TAG_SOURCE)
	@ if [ ! -s nofftpack.f90 ]; then rm -f nofftpack.f90; fi
	@ if [ ! -s fft.f90 ]; then rm -f fft.f90; fi

# Clean up, but leave makefile and TAGS
clean:
	rm -f *.x *.o *.mod *.d cparam*.inc cparam_pencils*.inc *.il mpicomm_.f90
	rm -f special/*.o special/*.mod 
	rm -f *.dot *.ps  # Dependency diagram files
	rm -f work.pc work.pcl .buildinfo .buildtime
	printf "# %s\n" "Empty" "(This file was written by 'make')" > Makefile.inc

# Clean up all
# (there should be no Makefile_inc; but if there is, `make' just does nothing)
cleann: clean
	rm -f Makefile Makefile_inc TAGS mpicomm_.f90 mpicomm_double*.f90
	rm -rf semiauto-conf_tmp
	rm -f *.inc && touch Makefile.inc
	$(MAKE) $(MAKEOPTS) -f Makefile.src Makefile
# same thing
cleanall: cleann

# Try to remove everything generated by pc_setupsrc, compilation, etc.
distclean: cleanall
	find . -type l -print0 | xargs -0 rm -f
	rm -rf special semiauto-conf* Makefile Makefile.inc *.log

## ---------------------------------------------------------------------- #
## Code targets
## ---------------------------------------------------------------------- #

nograv.o:
	echo "Hej"

read_videofiles$(PC_META_TYPE).x: $(read_videofiles)
	$(LD) $(LDFLAGS) $(read_videofiles) $(LD_MPI) -o read_videofiles$(PC_META_TYPE).x

read_vectorfiles$(PC_META_TYPE).x: $(read_vectorfiles)
	$(LD) $(LDFLAGS) $(read_vectorfiles) $(LD_MPI) -o read_vectorfiles$(PC_META_TYPE).x

var2ascii$(PC_META_TYPE).x: $(var2ascii)
	$(LD) $(LDFLAGS) $(var2ascii) $(LD_MPI) -o var2ascii$(PC_META_TYPE).x

write_dnlists_deps=write_dummy_namelists$(PC_META_TYPE).o $(comm_deps) $(DEBUG)$(PC_META_TYPE).o
write_dummy_namelists$(PC_META_TYPE).x: $(write_dnlists_deps)
	$(LD) $(LDFLAGS) $(write_dnlists_deps) $(LD_MPI) -o write_dummy_namelists$(PC_META_TYPE).x

## ---------------------------------------------------------------------- #
## Non-F90 / undetectable dependencies
## ---------------------------------------------------------------------- #
#
fft$(PC_META_TYPE).o:	     fft.f Makefile.src
nodebug$(PC_META_TYPE).o:            nodebug.f90 cdata$(PC_META_TYPE).o $(MPICOMM_FIX)$(PC_META_TYPE).o
#$(TIMEAVG)$(PC_META_TYPE).o:        ctimeavg.local
#axeltest $(INITCOND_SPEC)$(PC_META_TYPE).o:$(INITCOND_SPEC).f90
write_dummy_namelists$(PC_META_TYPE).o: write_dummy_namelists.f90 $(comm_deps)

## ---------------------------------------------------------------------- #
## Dependencies
## ---------------------------------------------------------------------- #
include Makefile.depend

# DO NOT DELETE
