#!/bin/sh
#  -*-Perl-*-
#======================================================================#
# Run the right perl version:
if [ -x /usr/local/bin/perl ]; then
  perl=/usr/local/bin/perl
elif [ -x /usr/bin/perl ]; then
  perl=/usr/bin/perl
else
  perl=`which perl| sed 's/.*aliased to *//'`
fi

exec $perl -x -S $0 "$@";     # -x: start from the following line
#======================================================================#
#! /Good_Path/perl -w 
# line 17

# Name:   mkcparam
# Author: wd (Wolfgang.Dobler@kis.uni-freiburg.de)
# Date:   06-Jul-2002
# CVS: $Id: mkcparam,v 1.23 2003-10-13 11:48:52 mee Exp $
# Description:
#   Going through the input files, check for lines of the sort
#     MAGNETIC=magnetic
#   and calculate the number mvar of variables and maux of variables 
#   accordingly.
#
#   Output is written as a Fortran program and supposed to end up in the
#   local file src/cparam.inc .
#
#   30-nov-02/tony: Modified to use makefile lines where the Make variable
#                   and module name differ by more than just case
#                     e.g.   VISCOSITY=visc_shock
#                   Also count maux variables too.
#
#   12-oct-03/tony: Modified to use in-code declarations of f-array
#                   contributuions. 
#                   Fortran files should contain a block like the
#                   following at the top to declare any contribution
#                   they make to the f-array.
# !** AUTOMATIC CPARAM.INC GENERATION ****************************
# ! Declare (for generation of cparam.inc) the number of f array
# ! variables and auxilliary variables added by this module
# !
# ! MVAR CONTRIBUTION 0
# ! MAUX CONTRIBUTION 1
# !
# !***************************************************************
#
# ---------------------------------------------------------------------- #
my $mvar_declaration = '\s*!\s*MVAR\s*CONTRIBUTION\s*([0-9]+)';
my $maux_declaration = '\s*!\s*MAUX\s*CONTRIBUTION\s*([0-9]+)';
# ---------------------------------------------------------------------- #

use strict;
use Getopt::Long;

my $line;
my $maux=0;
my $mvar=0;
my $found_mvar=0;
my $found_maux=0;

(my $cmdname = $0) =~ s{.*/}{};
my $usage =
"Usage:  $cmdname <file1> [<file2> [..]] [-o outfile]\n
Going through the input files, check for lines of the sort
! MVAR CONTRIBUTION 0
or
! MAUX CONTRIBUTION 1
and calculate the number mvar of variables accordingly. Output is written
as a Fortran program that can be included by cparam.f90.
E.g.
  $cmdname entropy.f90 nomagnetic.f90 hydro.f90 > src/cparam.inc
will generate a file appropriate for code using given source files
only.";


## Process command line
my (%opts);	# Variables written by GetOptions
GetOptions(\%opts,
	   qw( -h   --help
	       -o=s --output=s
                               ));

die "$usage\n" if ((@ARGV == 0) || $opts{h} || $opts{help});

my $outfile = ($opts{o} || $opts{output} || "-");
open(OUT, "> $outfile") or die "Can't open $outfile for writing";

# Cycle through files (later files will overwrite effect of earlier files)
  foreach my $infile (@ARGV) {
# Now extract `?VAR CONTRIBUTION' info from each file
    open(INPUT,"< $infile") || warn "Can't open $infile for reading";
# Reset the counters
    $found_mvar=0;
    $found_maux=0;
# Cycle through lines in file
    while (defined($line=<INPUT>) && !($found_mvar && $found_maux)  ) {
	  if ($line =~ /$mvar_declaration/) {
	    $mvar = $mvar + $1;
	    $found_mvar = 1;
	  }
	  if ($line =~ /$maux_declaration/) {
	    $maux = $maux + $1;
	    $found_maux = 1;
	  }
    }
  }

## ..and write output
print OUT <<"EOF";
!                       -*-f90-*- (for Emacs)
!  cparam.inc
!
! This file was automatically generated by $cmdname, so think twice before
! you modify it. It is included by cparam.f90 .
!

integer, parameter :: mvar=$mvar, maux=$maux
EOF

# End of file mkcparam
