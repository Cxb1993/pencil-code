#!/bin/csh
#  $Id: pc_copypvar 13633 2010-04-14 13:59:09Z Bourdin.KIS $
#
#  Author: Anders Johansen
#
#  Usage:
#    pc_copypvar pvar1 pvar2 source dest [-e | -execute=1]
#    pc_copypvar pvar1 pvar2 dest [-e | -execute=1]
#    pc_copypvar pvar1 pvar2 [-e | -execute=1]
#
#  Example:
#    pc_copypvar pvar.dat PVAR9 ../othersim
#      copies all pvar.dat files from current directory to PVAR9 in '../othersim'
#    pc_copypvar v v onesim othersim
#      copies all pvar.dat files from 'onesim' directory to pvar.dat in 'othersim'
#    pc_copypvar 8 v onesim othersim
#      copies all PVAR8 files from 'onesim' directory to pvar.dat in 'othersim'
#    pc_copypvar v v onesim $USER@server:othersim -cp=scp
#      copies with scp to other server. cp is automatically set to 'scp' if
#      a colon appears in the source or destination directories.
#
#  Abbreviations:
#    v, pvar       - pvar.dat
#    naked number - PVAR*
#
set data=data/
set narg=0
set cp=cp
set execute=0
set e=0
#
#  Sort through all command line input.
#
foreach block ($argv)
  if ("$block" =~ -*) then # optional input
    if ("$block" =~ *=*) then
      set pvariable = `perl -e "@a = split /=/, '$block'; print @a[0]"`
      set value    = `perl -e "@a = split /=/, '$block'; print @a[1]"`
      set pvariable = `perl -e "@a = substr('$pvariable',1); print @a[0]"`
      set $pvariable = $value
    else # option
      set option   = `perl -e "@a = substr('$block',1); print @a[0]"`
      set $option
    endif
  else # count number of mandatory input slots
    set narg=`expr $narg + 1`
  endif
end
#
#  Need at least three fields of mandatory input.
#
if ( $narg < 2 ) then
  echo "Usage: pc_copypvar pvar1 pvar2 source dest [-e | -execute=1]"
  echo "       pc_copypvar pvar1 pvar2 dest [-e | -execute=1]"
  echo "       pc_copypvar pvar1 pvar2 [-e | -execute=1]"
  exit
endif
#
#  Snapshots names and source and destination directories.
#
set pvar1=$argv[1]
set pvar2=$argv[2]
if ( $narg > 3) then
  set source=$argv[3]
  set dest=$argv[4]
else if ( $narg == 3 ) then
  set dest=$argv[3]
  set source='.'
else
  set dest='.'
  set source='.'
endif
#
#  Abbrevations.
#
if ($e != 0) then
  set execute=1
endif
if ( $pvar1 =~ "v" || $pvar1 =~ "pvar") then
  set pvar1='pvar.dat'
endif
if ( $pvar2 =~ "v" || $pvar2 =~ "pvar") then
  set pvar2='pvar.dat'
endif
#
#  Naked integers get 'PVAR' in front.
#
set int1=`perl -e '$int = '$pvar1' =~ /^\d+$/; print $int;'`
if ( $int1 =~ 1 ) then
  set pvar1="PVAR$pvar1"
endif
set int2=`perl -e '$int = '$pvar2' =~ /^\d+$/; print $int;'`
if ( $int2 =~ 1 ) then
  set pvar2="PVAR$pvar2"
endif
#
#  Automatically set cp to 'scp' if ':' appears in source or destination.
#
set remsource=`echo $source | grep -c ":"`
set remdest=`echo $dest | grep -c ":"`
if ($remdest > 0 || $remsource > 0) then
  set cp="scp"
endif
#
#  Inform what is about to happen.
#
echo ""
if ($execute) then
  echo "Going to execute"
else
  echo "This command would execute"
endif
echo "  $cp $source/${data}proc*/$pvar1 $dest/${data}proc*/$pvar2"
if ($execute) echo ""
#
#  Only execute the command if -e or -execute=1 is set, to avoid catastrophes.
#
if ($execute) then
  foreach dir ( $source/${data}proc* )
    set procdir=`basename $dir`
    echo "$cp $source/${data}$procdir/$pvar1 $dest/${data}$procdir/$pvar2"
    $cp $source/${data}$procdir/$pvar1 $dest/${data}$procdir/$pvar2
  end
else
  echo ""
  echo "** To really do this, run the same command with -e or -execute=1 **"
endif
