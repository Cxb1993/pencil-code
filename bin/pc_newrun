#!/bin/sh 
#
#  $Id: pc_newrun,v 1.3 2005-12-20 19:29:30 mee Exp $
#
#  This script uses mkdatadir which links the subdirectory data
#  to some data disk (which is machine dependent and therefore
#  you may want to adapt mkdatadir for your particular machine).
#
#  Usage:
#     new run1 run2
#  Alternative usage, if one is already in run1
#     new run2
#

while expr "$1" : - ; do
  case $1 in
    -s) 
      same_source=1
      echo "Using same source directory"
      shift
    ;;
    --same-source)
      same_source=1
      echo "Using same source directory"
      shift
  esac
done

if [ $# -eq 2 ]; then
  olddir=`pwd`/$1
  newdir=`pwd`/$2
else
  olddir=`pwd`
  cd ..
  newdir=`pwd`/$1
fi
#
#  save current working directory and make new run directory
#  and go there.
#
parentdir=`pwd`
echo "Parent directory: " $parentdir
mkdir $newdir
cd $newdir
targetdir=`pwd`
#
#  In the new run directory, call mkdatadir, and
#  write file with name of directory from which
#  the new one is generated
#
$PENCIL_HOME/bin/mkdatadir

[ -e data/new_from.dir ] || touch data/new_from.dir
(echo $olddir; /bin/date) >> data/new_from.dir
#
#  make src dir and go there
#

if [ $same_source ]; then
  if [ -h $olddir/src ]; then 
    ln -s `readlink $olddir/src`
  else
    ln -s $olddir/src
  fi
else
  mkdir src
  cd src
#
#  use *.local files from previous src directory
#  and run setup-src
#
  echo "old source directory: " $olddir/src
  cp $olddir/src/*.local .
  echo "Use *.local files from:" `pwd`; ls -l *.local
  cd ..
#
#  if there exists a bin/setup-src.local file
#  it is being executed prior to setup-src
#  This gives the possibility to link your own routines
#  into src (setup-src below won't overwrite those)
#
fi

  [ -f $parentdir/bin/setup-src.local ] && $parentdir/bin/setup-src.local
#
#  continue with the usual setup procedure
#
  $PENCIL_HOME/bin/setup-src
#
#  copy *.in and k.dat files into new directory
#  the k.dat file is actually only needed for forced
#  turbulence runs
#

cd $olddir
echo "Use *.in files from:" `pwd`; ls -l *.in
cp *.in $targetdir
[ -f k.dat ] && cp k.dat $targetdir
[ -f stratification.dat ] && cp stratification.dat $targetdir
#
