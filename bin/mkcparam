#!/bin/sh
#  -*-Perl-*-
#======================================================================#
# Run the right perl version:
if [ -x /usr/local/bin/perl ]; then
  perl=/usr/local/bin/perl
elif [ -x /usr/bin/perl ]; then
  perl=/usr/bin/perl
else
  perl=`which perl| sed 's/.*aliased to *//'`
fi

exec $perl -x -S $0 "$@";     # -x: start from the following line
#======================================================================#
#! /Good_Path/perl -w 
# line 17

# Name:   mkcparam
# Author: wd (Wolfgang.Dobler@kis.uni-freiburg.de)
# Date:   06-Jul-2002
# CVS: $Id: mkcparam,v 1.2 2002-07-08 05:48:58 brandenb Exp $
# Description:
#   Going through the input files, check for lines of the sort
#     MAGNETIC=magnetic
#   and calculate the number mvar of variables accordingly.
#   Output is written as a Fortran program and supposed to end up in the
#   local file src/cparam.inc .

# ---------------------------------------------------------------------- #
my %modules = ( # module_name => contribution to mvar
	        hydro    => 3,
	        density  => 1,
	        entropy  => 1,
	        magnetic => 3,
		pscalar  => 1,
	      );
my $identifier = "[a-zA-Z0-9_]"; # module names must consist of these
# ---------------------------------------------------------------------- #

use strict;

my $line;
my %modcounts;

(my $cmdname = $0) =~ s{.*/}{};
my $usage =
"Usage:  $cmdname <file1> [<file2> [..]]\n
Going through the input files, check for lines of the sort
  MAGNETIC=magnetic
and calculate the number mvar of variables accordingly. Output is written
as a Fortran program that can be included by cparam.f90.
E.g.
  $cmdname src/Makefile src/Makefile.local > src/cparam.inc
will generate a file that takes into account that Makefile.local overwrites
settings from Makefile.";

die "$usage\n" if ((@ARGV == 0) or $ARGV[0] =~ /--?h/);

# Cycle through files (later files will overwrite effect of earlier files)
foreach my $infile (@ARGV) {
    open(INPUT,"< $infile") || die "Can't open $infile for reading";
    # Cycle through lines in file
  file: while (defined($line=<INPUT>)) {
	# Only definitions of Make variables are interesting:
	next unless ($line =~ /^\s*$identifier+\s*=\s*$identifier/);
	# cycle through module list and check
      key: while (my ($mod,$count) = each %modules) {
	    my $MOD = "\U$mod";	# consider only lines of the form
	                        #   MOD=mod
                                # with only case differences (this may
                                # need to be changed at some point)
	    if ($line =~ /^\s*$MOD\s*=\s*($identifier*)($|\s)/) {
		if ($1 eq $mod) { # `mod' is used
		    $modcounts{$mod} = $modules{$mod}; # overwrite
                                                       # existing value
		} else {	# `nomod' is used (or not `mod' in any case)
		    $modcounts{$mod} = 0;
		}
	    }
	}
    }
}

# use Data::Dumper;
# print Dumper(\%modules,\%modcounts);

## Extract mvar..
my $mvar=0;
foreach(values(%modcounts)) {
    $mvar += $_;
}

## ..and write output
print <<"EOF";
!                    -*-f90-*-  (for Emacs)
!  cparam.inc
!
! This file was automatically generated by $cmdname, so think twice before
! you modify it. It is included by cparam.f90 .
!
  integer, parameter :: mvar=$mvar
EOF

# End of file mkcparam
