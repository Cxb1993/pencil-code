#!/bin/sh
#  -*-Perl-*-  (for Emacs)    vim:set filetype=perl:  (for vim)
#======================================================================#
# Run the right perl version:
if [ -x /usr/local/bin/perl ]; then
  perl=/usr/local/bin/perl
elif [ -x /usr/bin/perl ]; then
  perl=/usr/bin/perl
else
  perl=`which perl| sed 's/.*aliased to *//'`
fi

exec $perl -x -S $0 "$@";     # -x: start from the following line
#======================================================================#
#! /Good_Path/perl -w 
# line 17

# Name:   mkdummyinc
# Author: Antony Mee (A.J.Mee@ncl.ac.uk)
# Started:   18-Jul-2006
# CVS: $Id: mkdummyinc,v 1.2 2006-11-16 16:29:02 theine Exp $
# Usage:
#   mkdummy [-o outfile] -d dummyfile < source_file \n
# Description:
#
#   Output is written as a Fortran program and supposed to end up in the
#   local file src/$(XXXXXX_MODULE)_dummies.inc .
# Example:
#     mkdummy -d nospecial.f90 -s special/neutron_star.f90 > special_dummies.inc

# History:
#   17-jul-06/tony: Created
#

# ---------------------------------------------------------------------- #
my $fortran_routine  = '^\s*(subroutine|function)\s*([^\s(])\s*\(.*?\).*end $1 $2\s*$';
# ---------------------------------------------------------------------- #

use strict;
use Getopt::Long;

my @implemented;

(my $cmdname = $0) =~ s{.*/}{};

## Process command line
my (%opts);	# Variables written by GetOptions
GetOptions(\%opts,
	   qw( -h   --help
	       -o=s --output=s
	       -d=s --dummy=s
	       -s=s --src=s
                               ));

die usage() if ($opts{h} || $opts{help});

my $srcfile = ($opts{s} || $opts{src} || "-");

my $dummyfile = ($opts{d} || $opts{dummyfile} || die "no dummy speficied");

my $outfile = ($opts{o} || $opts{output} || "-");
open(OUT, "> $outfile") or die "Can't open $outfile for writing";

find_implemented_routines($srcfile);
write_dummies($dummyfile);

# ---------------------------------------------------------------------- #
sub usage {
# Extract description and usage information from this file's header.
    my $thisfile = __FILE__;
    local $/ = '';              # Read paragraphs
    open(FILE, "<$thisfile") or die "Cannot open $thisfile\n";
    while (<FILE>) {
	# Paragraph _must_ contain `Description:' or `Usage:'
        next unless /^\s*\#\s*(Description|Usage):/m;
        # Drop `Author:', etc. (anything before `Description:' or `Usage:')
        s/.*?\n(\s*\#\s*(Description|Usage):\s*\n.*)/$1/s;
        # Don't print comment sign:
        s/^\s*# ?//mg;
        last;                        # ignore body
    }
    $_ or "<No usage information found>\n";
}
# ---------------------------------------------------------------------- #
sub is_implemented {
    my $subname = shift;

    foreach my $name (@implemented) {
      return 1 if ($subname =~ /^\s*$name\s*$/i);
    }
    return 0;
}
# ---------------------------------------------------------------------- #
sub find_implemented_routines {
    my $file = shift;
    open(SRC,"<$file") || die "cannot open $file";

    while( my $line = <SRC> ) {
	  chop($line);
	  my $lout = $line;
	  if(  $line =~ /^\s*subroutine/i || $line =~ /^\s*function/i ||
          	 $line =~ /^\s*integer\s*function/i ) {
	      my $subname;
	      my @words = split " ", $line;
	      if( $words[1] =~ /^\s*function/i ) {
	          ( $subname = $words[2] ) =~ tr/A-Z/a-z/;	#lower case
	      } else {
	          ( $subname = $words[1] ) =~ tr/A-Z/a-z/;	#lower case
	      }
	      $subname =~ s/\s//g;			#remove whitespace
	      $subname =~ s/\(.*$//;
          push @implemented, $subname
	  }
    }

    close(SRC);
}
# ---------------------------------------------------------------------- #
sub write_dummies {
    my $file = shift;
    my $write_line=0;
    open(SRC,"< $file") || die "cannot open $file";
    print OUT 
"!***********************************************************************
!
!                 AUTOMATICALLY GENERATED FILE 
!            ALL CHANGES TO THIS FILE WILL BE LOST
!
! File created by $cmdname from:
!   Source file:  $srcfile
! and
!   Dummy file:   $dummyfile
!
!***********************************************************************
";
    while ( my $line = <SRC> ) {
	  chop($line);
	  my $lout = $line;
	  if(  $line =~ /^\s*subroutine/i || $line =~ /^\s*function/i ||
          	 $line =~ /^\s*integer\s*function/i ) {
	      my $subname;
	      my @words = split " ", $line;
	      if( $words[1] =~ /^\s*function/i ) {
	          ( $subname = $words[2] ) =~ tr/A-Z/a-z/;	#lower case
	      } else {
	          ( $subname = $words[1] ) =~ tr/A-Z/a-z/;	#lower case
	      }
	      $subname =~ s/\s//g;			#remove whitespace
	      $subname =~ s/\(.*$//;
          $write_line = ! is_implemented($subname);
	  }

      print OUT "$lout\n" if ($write_line);
    }

    close(SRC);
}
# End of file mkdummyinc
